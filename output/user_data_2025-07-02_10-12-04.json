{
  "timestamp": "2025-07-02_10-12-04",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "Ow \u00ae 0\n\nChatGPT File Edit View Window Help 6 \u20ac8 \u00a9GD O S 2) FF Q SB \u00a9 WedJul2 10:12AM\n\n= x x Oo x Oo x x M x x x 6 x  @ Apikeys - OpenAl Al X\nSC > G #\u00e9A \u00a9 @ <2 platform.openai.com/settings/organization/api-keys eee OG Intelligent Excuse Generator Plan > es a\nBhuvan\ne O excuse-generator By BHouwdo FPS RY ST SE PETS IS EET ETT ST TE ET ET EO\neT when your org has promo credit or you've pre-paid. If you don't want to attach a card, switch\n| oO EXPLORER + J Welcome \u00ae excuse_api.py 4,U X %.env U Py YO - y 9g p y p Pp y '\nV EXCUSE-GENERATOR \u00ae excuse_apipy > .. to another provider or an open-source model.\n{> \u2014pyeache_ 1 # excuse_api.py = Om \u00a9 QY _ BD Sources\nv .venv . q q \u2018 bbs\n\u00bb > itr 2 import os, json, time, hashlib k\n> include 3 from pathlib import Path a ;\n> P . P why dont we usae gemini then do they offer free option\nP ' 4 from dotenv import load_dotenv\n\u00a9 pyvenv.cfg U RRR\n& env t 5  load_dotenv() # - NEW: pulls OPENAT_API_KEY from .env\nHS excuse_apipy 4,U 6 from fastapi import FastAPI Thought for 15 seconds >\nA UD Wana \u00b0 7 from pydantic import BaseModel Yes \u2014 Gemini Pro does have a genuinely-free developer tier\n= requirements.txt U I\n8 from openai import OpenAI\n9 # ---------- OpenAI client ---------- Google Al Studio lets you create an API key that works immediately with no credit-card.\n1@ client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\") ) Current limits for the free tier are = 60 requests per minute and ~1 000 requests per day per\n11 key  indiatimes.com  ai.google.dev , Which is plenty for a capstone demo.\nPROBLEMS @ OUTPUT DEBUGCONSOLE TERMINAL PORTS tye A Xx\nsync P >.) python3.11\nreturn await get_async_backend().run_sync_in_worker_thread( >] zsh\n[AAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAAARAAAAAAARARAAAAANA Pr\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 24 How to switch your project from OpenAl to Gemini in ~10 minutes\n70, in run_sync_in_worker_thread\nreturn await future\nGC AEE LATHE SETSSGIEMTETRERLY/ T LY SST E VASES ETE SEY ET YTE SEEY TST line 96 Step What you type / click Result\nresult = context.run(func, xargs) 1.\nFile \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 38, in generate 1.Geta key 1 Sign in\nres = client.chat.completions.create( . .\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/_utils/_utils.py\", line 287, i\nn wrapper\nreturn func(*args, +kkwargs) b\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/resources/chat/completions/com\npletions.py\", line 1087, in create\nreturn self._post(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/_base_client.py\", line 1249, i\nn post\nreturn cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls) ) 1\nAAAAAAAAAAAAAAAAARAAAAAAAAAAAAARAAAAAAAAAARAAAAAAANAANARRAAAANAAN 1\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/_base_client.py\", line 1037, ap 0\nn request v\n(2) raise self._make_status_error_from_response(err.response) from None\nopenai.RateLimitError: Error code: 429 - {'error': {'message': \u2018You exceeded your current quota, please check your p\n> OUTLINE lan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/\n$03 Sacine reer codes/apicerrors. ', \u2018'type': 'insufficient_quota', 'param': None, \u2018code': 'insufficient_quota'}} \u20ac% Work with Code Tab x\n| % main* \u00ae@ @oA4 Q_ 1n10,Col53 Spaces:4 UTF-8 LF {} Python @& 3.13.264-bit\n\nMessage Bhuvan\n\n+ @\u00ae ov ts)\nS800eEGE80 \u00a98210 &*"
}