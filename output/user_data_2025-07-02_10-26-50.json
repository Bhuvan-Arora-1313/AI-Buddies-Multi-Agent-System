{
  "timestamp": "2025-07-02_10-26-50",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "from dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\n",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"gemini-pro\")\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\n{prompt}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "@ Code File Edit Selection View Go Run Terminal Window Help 6 8 \u00a9 GD O S 2x) F Q &S O@ Wed Jul2 10:26AM\n=} List of research @ Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Co [a LAUNCHED Glob \u2122 Launched - Artif Artificial_Intelligence | Al-05-BBLEN4 \u00a9 OpenAl coy API keys - Open/ (S) Gemini API refer * Get API key | G: X\nO<\u00abvr ca O 8 & aistudio.google.com/apikey Intelligent Excuse Generator Plan > \u2014\nBhuvan\n\u00a9 0e@e0@ <> PP excuse-generator By Cob WwW\n: model = genai.GenerativeModel(\"models/gemini-pro\" ) -\na EXPLORER J Welcome \u00ae excuse_api.py 5,U @  .env U Py\nVv EXCUSE-GENERATOR @ excuse_api.py > ...\n\u00a9 {> \u2014Pycache_ 1 # excuse_api.py 1\nVv env \" q q .\n> ot 2 import os, json, time, hashlib - 4\noo > include 3 from pathlib import Path , Updated top-of-file snippet\n| 2b 4 from dotenv import load_dotenv, find_dotenv\n& \u00a9 pyvenv.cfg U RRR . . python fa) Copy\nony u 5 load_dotenv(find_dotenv(), override=True)\nBS @ excuse_api.py 5,U 6 5 5\nOlnistonyison 5 . . . . from dotenv import load_dotenv, find_dotenv\nSEEGER 7 import google.generativeai as genai load_dotenv(find_dotenv(), override=True)\n8 genai.configure(api_key=os.getenv(\"GEMINI_KEY\") ) : \u2014 .\n9 import google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\") )\n10 from fastapi import FastAPI\n11 from pydantic import BaseModel model = genai.GenerativeModel(\"gemini-pro\" )\n12\n13 import google.generativeai as genai\n14 genai.configure(api_key=os.getenv(\"GEMINI_KEY\") )\n15 model = genai.GenerativeModel(\"gemini-pro\") Test again\n1@ Ff ===Saeeees simple \u201cDB\u201d ---------\u2014\n17. DATA = Path(\"history. json\") bash \u00a9) Copy\n18 if not DATA.exists(): . .\nPROBLEMS @ OUTPUT DEBUGCONSOLE TERMINAL PORTS +y A x uvicorn excuse_api:app \u2014\u2014-reload\n7 : ez curl -X POST http://127.0.0.1:8000/generate \\\ngenerativeai) (2.33.2 -) ZS | _ . . * .\nRequirement already satisfied: typing-inspection>=0.4.@ in ./.venv/lib/python3.11/site-packages (from TeEnicsgeogh >] zsh H \"Content Type: application/j son\" \\ .\nle-generativeai) (0.4.1) = -d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}'\nDownloading google_generativeai-@.8.5-py3-none-any.whl (155 kB) 7\nInstalling collected packages: google-generativeai\nSuccessfully installed google-generativeai-0.8.5 if . . qn 5\n\u00a9 (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % pip show google-generativeai You should now get a JSON payload (or, if you spam too quickly, a 429 \u201cquota\u201d message).\nName: google-generativeai\nVersion: 0.8.5 i\"\nSummary: Google Generative AI High level API client library and tools.\nHome-page: https://github.com/google/generative-ai-python\nAuthor: Google LLC 1\nAuthor-email: googleapis\u2014packages@google. com q .\n@ License: Apache 2.0 Still seeing errors?\nLocation: /Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages |\nRequires: google-ai-generativelanguage, google-api-core, google-api-python-client, google-auth, protobuf, pydantic,\nsb > OUTLINE tqdm, typing-extensions [ v\nRequired-by: E i i 7\n> TIMELINE (.venv) bhuvanarora@Bhuvans-MacBook-Pro excuse-generator % [] : rror text Likely cause Quick fix\nwy % main* \u00ae@ @O0A5 Q LnQ,Col1 Spaces:4 UTF-8 LF {} Python @& 3.13.264-bit\n\u2014 ; - =| Message Bhuvan\nB file.pdf ITRV (1).pdf ITRV.pdf JETIR2101184 Iko to mtj Iko to MTJ (1).pdf = Iko to MTJ-s. a ee\n\nS80\u00b0G8880 eee 7a\n\nae"
}