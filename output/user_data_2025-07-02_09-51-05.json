{
  "timestamp": "2025-07-02_09-51-05",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "@ ChatGPT File Edit View\n\nOw \u00ae 0\n\nnay\n\n=} List of research pape X\n\n\u20ac > C\n\nOpenAl Platform\n\nQ Search % OK\nVoice activity detection\n\nMODEL OPTIMIZATION\nOverview\n\nEvals\n\nSupervised fine-tuning\nVision fine-tuning\n\nDirect preference\noptimization\n\nReinforcement fine-\nuning\n\nGraders\n\nDistillation\n\nSPECIALIZED MODELS\n\nmage generation\nText to speech\nSpeech to text\nEmbeddings\n\nModeration\n\nCODEX\nCodex\n\n</) Cookbook\n\n228 Forum\n\n\u00a9) Help\n\nWindow Help\n\nO @& = platform.openai.com/docs/overview\n\n* Artificial Intelligence X co 1 > x co x [a\n\nXx \u2014 &\u2122 Launched - Artifici\n\nOpenAl developer platform\n\nDeveloper quickstart\n\nMake your first API request in\nminutes. Learn the basics of the\nOpenAl platform.\n\n\u00ae 5min\n\nBrowse models\n\nGPT-4.1\nFlagship GPT model for complex tasks\n\nStart building\n\nRead and aenerate text\n\nS80\u00b0eE68E20 OD\n\njavascript \u00a9\n\nimport OpenAI from \u201copena\n\nconst client = new OpenAI |\n\nconst response = await cl:\n\n1)\n\nmodel: \"\u201cgpt-4.1\",\ninput: \"Write a one-s\n\nconsole. log( response. outpt\n\n04-mini\n\nFaster, more affordable reas\n\nhow can i ge my pi key\n\nThought for a couple of seconds\n\nHere's how to get a secret OpenAl API key you can drop into your . env file:\n\nStep What to do Where / what it looks lik:\n\n1. Sign in Go to https://platform.openai.com and log in Browser\nwith your OpenAl account. (If you don't have\n\none, click Sign Up > verify email & phone.)\n\n2. Open \u201cAPI Keys\u201d Click your avatar (bottom-left) > \u201cView API\n\nkeys\u201d.\n\nLeft-side column shows i\n\n3. Create a new key Press \u201cCreate new secret key\u201d > give it a A one-time modal appeal\n\nlabel such as \u201cexcuse-generator\u201d > Create. starting with sk-....\n\n**4. Copy immediately Click \u201cCopy\u201d. You'll never be able to see it Clipboard now holds sorr\nlike:s k-4 fG3XXXXXXXX)\n\nXXXX\n\nagain once you close the modal.\n\n5. Store it in your project In VS Code: open your .env file and paste:\nOPENAI_API_KEY=sk\u20144fG3XXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXX\n\nSave (#S / Ctrl S).\n\n6. Keep it secret - Do not commit . env to Git. - If the key ever\n\nleaks, hit \u201cRevoke\u201d on the same page and\ncreate a new one.\n\nRestart & test\n\nMessage Bhuvan\n\n+ @\u00ae ov\n\neo\n\n. . .\n\n=]\n\n6 \u20ac&8 \u00a9O O S 3%8) F Q S @ WedJul2 9:51AM\nx x x S x Ss Overview - OpenAl 4 X\neee \u00a9 G Intelligent Excuse Generator Plan > C\nwv uv"
}