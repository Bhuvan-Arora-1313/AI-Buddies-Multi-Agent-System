{
  "timestamp": "2025-07-02_10-43-07",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "python - <<'PY'\nimport os, google.generativeai as genai, dotenv, json\ndotenv.load_dotenv('.env', override=True)\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nm = genai.GenerativeModel(\"models/gemini-pro\")\nprint(json.loads(m.generate_content(\"Respond with JSON: {\\\"hello\\\":\\\"world\\\"}\").text))\nPY",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"models/gemini-pro\")\nprint(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "@ ChatGPT File Edit View Window Help S6\u00a9 \u20ac8 OG O S mw F Q Se \u00a9 Wed Jul2 10:43AM\n\n\u00a9 List of research =) Artificial intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Cc BB Launcue Glot \u2122 Launched - Artif Artificial_Intelligence (B\u00ae al-05-BBLena \u00a9 Openal @ apikeys - Open \u00a9 Gemini API refer 96 Get API key | GX\n\nC\u20ac > G @\u00e9 O 8 \u00ae aistudio.google.com/apikey eee OG Intelligent Excuse Generator Plan > Gl =\n\nBhuvan\n\noO\n6 <> P excuse-generator By ob Ow a\n\n| EXPLORER + J Welcome \u00ae excuse_api.py 4,U @ env U Dy\n\nVv EXCUSE-GENERATOR @ excuse_api.py > ...\n\n\u00a9\n\n> __pycache__ 7\n\nVV venv Ps\n\nPp\npay > bin 8 ie\n> include 9 from fastapi import FastAPI\nS 2. ; 18 from pydantic import BaseModel iam step 4\npyvenv.cfg ILL\npS\nA\n\nU\n\u00a5 11\n\u00ae excuse_api.py 4, U 12 import google.generativeai as genai e\nU\nU\n\n\u00a9 .env\n\n{} history.json\n\n13 genai.configure(api_key=os.getenv(\"GEMINI_KEY\") )\n\n14 model = genai.GenerativeModel(\"models/gemini-pro\")\n15 print(\"'>>> model being used:\", model._name)\n\n16 # ---------- simple \u201cDB\u201d -\u2014---------\n\n17 DATA = Path(\"history. json\")\n\n18 if not DATA.exists():\n\n19 DATA.write_text(\"[]\") # seed empty list\n20\n\n21\n\nPROBLEMS @ OUTPUT DEBUG CONSOLE TERMINAL PORTS. +yv ooo\n\n= requirements.txt\n\nInternal Server Errorg -) python3.11\n@ bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\ >\n-H \"Content-Type: application/json\" \\ I\n-d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'\nInternal Server Errorg |\n@ bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\\n-H \"Content-Type: application/json\" \\ |\n-d '{\"scenario\":\"missed class\", \"\u201curgency\":\"panic\"}'\nInternal Server Errorg I\n@ bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}' I\nInternal Server Errorg\n\u00ae bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % python - <<'PY' |\nimport os, google.generativeai as genai, dotenv, json\ndotenv. load_dotenv('.env', override=True) I\ngenai. configure(api_key=os.getenv(\"GEMINI_KEY\") )\nm = genai.GenerativeModel(\"models/gemini-pro\") I 6\n()) print(json. loads(m.generate_content(\"Respond with JSON: {\\\"hello\\\":\\\"world\\\"}\").text))\nPY\nTraceback (most recent call last):\n> OUTLINE File \"<stdin>\", line 1, in <module>\n$03 ModuleNotFoundError: No module named \u2018google\u2019 A\n> TIMELINE bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % [] \u20ac excuse_api.py x\n\nUE & maine @ @o0A4 Ln 15, Col 45 Spaces: 4 UTF-8 LF {} Python @ 3.13.264-bit\n\n= bs bss w = e\u2019 _ _\noe)\nwv a)\n\nB file.pdf ITRV (1).pdf ITRV.pdf AIEUTIR EAI EY Iko to mtj Iko to MTJ (1).pdf = Iko to MTJ-s.\n\nzsh\n\nS80\u00b0G8880 eee 70 ae"
}