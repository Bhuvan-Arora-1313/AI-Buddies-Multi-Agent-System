{
  "timestamp": "2025-07-02_10-43-31",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "python - <<'PY'\nimport os, google.generativeai as genai, dotenv, json\ndotenv.load_dotenv('.env', override=True)\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nm = genai.GenerativeModel(\"models/gemini-pro\")\nprint(json.loads(m.generate_content(\"Respond with JSON: {\\\"hello\\\":\\\"world\\\"}\").text))\nPY",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"models/gemini-pro\")\nprint(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "\u00ab\n\no\nS\n\n\u00a9\n\nChatGPT File Edit View Window\u2019 Help\n= z co co |] M\n<> C84 O & & aistudio.google.com/apikey\n< PP excuse-generator By\nx Welcome @ excuse_api.py 4,U @\u00ae % .env U\n\n| EXPLORER\n\n\\Y EXCUSE-GENERATOR\n\nP > __pycache__\nVv env\n> bin\noe > include\n> lib\n& \u00a9 pyvenv.cfg\n\n\u00a9 .env\n\nre\nA\n\nU\nU\n@ excuse_api.py 4,U\n{} history.json U\n\nU\n\n= requirements.txt\n\n15\n\nPROBLEMS @\n\n@ excuse_api.py > ...\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"'GEMINI_KEY\") )\nmodel = genai.GenerativeModel(\"models/gemini-pro\")\nprint(\">>> model being used:\", model._name)\nsimple \u201cDB\u201d\nDATA = Path(\"history. json\")\nif not DATA.exists():\nDATA.write_text(\"[]\")\n\n# seed empty list\n\nOUTPUT DEBUG CONSOLE TERMINAL PORTS.\n\nInternal Server Errorg\n@ bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'\nInternal Server Errorg\n@ bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\\n-H \"Content-Type: application/json\" \\\n\n-d '{\"scenario\":\"missed class\",\n\n\"urgency\": \"panic\"}'\n\nInternal Server Errorg\n@ bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'\nInternal Server Errorg\n\u00ae bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % python - <<'PY'\nimport os, google.generativeai as genai, dotenv, json\ndotenv. load_dotenv('.env', override=True)\ngenai. configure(api_key=os.getenv(\"GEMINI_KEY\") )\nm = genai.GenerativeModel(\"models/gemini-pro\")\n()) print(json. loads(m.generate_content(\"Respond with JSON: {\\\"hello\\\":\\\"world\\\"}\").text))\nPY\n\nTraceback (most recent call last):\n\n$03 > OUTLINE\n\n> TIMELINE\n\nGE & maine @0A4\n\nFile \"<stdin>\",\nModuleNotFoundError: No module named \u2018google\u2019\nbhuvanarora@Bhuvans-MacBook-Pro excuse-generator % o\n\nline 1, in <module>\n\nLn 15, Col 45 Spaces 4 UTF-8\n\nfile.pdf ITRV (1).pdf ITRV.pdf AIEUTIR EAI EY\n\nIko to mtj\n\nS80\u00b0G8880 eeea ae\n\nLF\n\nby\n\nJoy cov\n\nDat\n\n{} Python\n\na O-\n\nA\n\npython3.11\nzsh\n\n&8 3.13.264-bit C4\n\nIko to MTJ (1).pdf\n\nIko to MTJ-s~\n\n\u00a9 BOO O SS eH FQ es\n* v \u00ae \u00a9 90 Get API key | G X\nIntelligent Excuse Generator Plan >\n\u00b0 . 2 cB Z Bhuvan\nAm 6 @\n\niam step 4\n\nThought for 5 seconds >\n\nLooked at Code\nLooked at Code\n\nWhat's happening in your screenshot\n1. Your FastAPI server prints \u201cInternal Server Error\" when you hit /generate.\n\n2. The quick-test one-liner (python \u2014 <<'PY' ..) blew up with\nModuleNotFoundError: No module named 'google', which means that shell\nwasn't inside the same virtual-env where you installed\n\ngoogle-generativeai.\n\nThat second error is a clue: your terminal tab did not have the venv\nactivated, so the test ran with the system Python (no Google package installed).\n\nVv\n1\u2014 Activate the venv in every terminal tab\n\n\u00a9 excuse_api.py x\n\nMessage Bhuvan\n\n+ @\u00ae\n\nen\n\nWw\n\n(es)\n\n10\n\n@ Wed Jul 2 10:43AM"
}