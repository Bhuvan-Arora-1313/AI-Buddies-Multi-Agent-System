{
  "timestamp": "2025-07-02_10-25-35",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "pip show google-generativeai",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"gemini-pro\")\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\n{prompt}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "@ Code File Edit Selection View Go Run Terminal Window Help 6 \u20ac8 \u00a9G O S wa F Q S @ Wed Jul2 10:25AM\n\n= List of research @ Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Cc ca LAUNCHED Glob M Launched - Artif Artificial_Intelligence [| Al-05-BBLEN4 \u00a9 Openal coy API keys - Open/ [G) Gemini API refer: +\u201d Get API key | G X\nO<\u00abvr cea O 8 & aistudio.google.com/apikey Intelligent Excuse Generator Plan > \u2014\nBhuvan\n6 ee@ <> PP excuse-generator By Cob WwW\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 1. An older SDK (< 0.3) is installed, or .\n2) | o EXPLORER + J Welcome \u00ae excuse_api.py 4,U X %.env U Dy\n\\ EXCUSE-GENERATOR \u00ae excuse_api.py > \u00a9 generate 2. You pass just \"gemini\u2014-pro\" while the old client expects \"models/gemini-pro\".\n> hi i\n\u00a9 P > \u2014Pycee eo 1 # excuse_api.py /\n5 oh 2 import os, json, time, hashlib \u2018ees ||\n\u2018ee LI\nca > include 3 from pathlib import Path  Fixint ick st\n. . Ix In TWO QUICK Steps\n> . a 4 from dotenv import load_dotenv q P\npyvenv.cfg U LILI\n& env t 5  load_dotenv() # < NEW: pulls OPENAT_API_KEY from .env\nES @ excuse_apipy 4,U 6 from fastapi import FastAPI 1 Upgrade the SDK so it speaks the new v1 API\n{} history.json U 7 f racer memenat .\nrom pydantic import BaseModel\nA = requirements.txt U 8 pyeantrc p bash oO Copy\n9 import google.generativeai as genai _| source .venv/bin/activate\n18 genai.configure(api_key=os.getenv(\"GEMINI_KEY\") ) pip uninstall -y google-generativeai\nq a amd ip install --no-cache-dir --upgrade google-generativeai\n11 model = genai.GenerativeModel(\"gemini-pro\") ae re eee\nW200 GP s==Sseeees simple \u201cDB\u201d ---------\u2014 2 . :\nnie P . h pip show google-generativeai should now say 0.3.x (or newer).\n13 DATA = Path(\"history. json\")\n14 if not DATA.exists():\n15 DATA.write_text(\"[]\") # seed empty list\n16 2 Use the canonical model name\n17\n18 With the new SDK (>= 0.3) simply use:\nPROBLEMS @ OUTPUT DEBUGCONSOLE TERMINAL PORTS. tye A xX\ngenerativeai) (2.33.2) S| BJ zsh python oO Copy\nRequirement already satisfied: typing-inspection>=0.4.@ in ./.venv/lib/python3.11/site-packages (from pydantic->goog >] zsh\nle-generativeai) (@.4.1) ~\nDownloading google_generativeai-0.8.5-py3-none-any.whl (155 kB) ' model = genai.GenerativeModel(\"gemini-pro\" )\nInstalling collected packages: google-generativeai\nSuccessfully installed google-generativeai-0.8.5 if\n@ (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % pip show google-generativeai\nName: google-generativeai If you must stay on the old SDK (not recommended), prepend models/:\nVersion: 0.8.5 :\nSummary: Google Generative AI High level API client library and tools. I\nHome-page: https://github.com/google/generative-ai-python\nAuthor: Google LLC 1 python (a) Copy\nAuthor-email: googleapis\u2014packages@google. com\n@ License: Apache 2.0 |\nLocation: /Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages F model = genai.GenerativeModel(\"mode!s/gemini-pro\" )\nRequires: google-ai-generativelanguage, google-api-core, google-api-python-client, google-auth, protobuf, pydantic,\n> OUTLINE tqdm, typing-extensions Vv\n$03 Required-by: '\n> TIMELINE (.venv) bhuvanarora@Bhuvans-MacBook-Pro excuse-generator % fj :\nwy % main* \u00ae@ @oA4 Q_ 1n39,Col63 Spaces:4 UTF-8 LF {} Python @ 3.13.264-bit (@\n|= = , \u2014 \u2014 =| Message Bhuvan\n= +O \u00a2 @\noy file.pdf ITRV (1).pdf ITRV.pdf JETIR2101184 Iko to mtj Iko to MTJ (1).pdf = Iko to MTJ-s.-=. eS Se ee\n\nf \u00a2\n.\n\n.\n\nS80\u00b0E8E820 098\u00b0"
}