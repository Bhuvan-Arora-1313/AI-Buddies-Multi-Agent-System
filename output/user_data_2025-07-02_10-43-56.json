{
  "timestamp": "2025-07-02_10-43-56",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "which python  ",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"models/gemini-pro\")\nprint(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "@ Code File Edit Selection View Go Run Terminal Window\u2019 Help 6 \u20ac8 OGD O S BH F Q S \u00a9 Wed Jul2 10:43AM\n= List of research @ Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Co ca LAUNCHED Glob M Launched - Artif Artificial_Intelligence [| Al-05-BBLEN4 \u00a9 Openal coy API keys - Open/ (S) Gg\nMaccy\n. @ which python--\nO<c\u00a2vr C84 O & \u00a9 aistudio.google.com/apikey Intelligent Excuse Generator Plan >\nBhuvan\n6 Co <5 P excuse-generator By oO Wl I. YOur FaSTAPI server prints \u201cInternal Server Error\u201d wnen you nit / generate.\n; .\ne y . . .\n2 | EXPLORER tessa O Gara Spi GU O Fe by & 2. The quick-test one-liner (python \u2014 <<'PY' ..) blew up with\n\\ EXCUSE-GENERATOR @ excuse_api.py > ... Q\n\u00a9 se) > yeas 7 ModuleNotFoundError: No module named 'google', which means that shell\n\u2014_ i ' . . . .\nVv venv 8 wasn't inside the same virtual-env where you installed\n> bin =| [| 5 9\nog = oogle-generativeal.\noe > include 9 from fastapi import FastAPI ==] google~g\n> a 18 from pydantic import BaseModel\n2) BRIGG) v 11 That second error is a clue: your terminal tab did not have the venv\n& .env U\nHS @ excuse_apipy 4, 12 import google.generativeai as genai activated, so the test ran with the system Python (no Google package installed).\nA 0 ee ne . 13. genai.configure(api_key=os.getenv(\"'GEMINI_KEY\") )\n= requirements.tx' . . . .\n14 model = genai.GenerativeModel(\"models/gemini-pro\")\n7 u 7 all . . .\n1@ Ff ===Saeeees simple \u201cDB\u201d ---------\u2014\n17. DATA = Path(\"history.json\") bash O) Copy\n18 if not DATA.exists():\n19 DATA.write_text(\"[]\") # seed empty list : i\nsource .venv/bin/activate\n20\n21 which python\nPROBLEMS @ OUTPUT DEBUG CONSOLE TERMINAL PORTS. + Vor AX . . .\n_\u2014 Open a new tab, activate again, and retry the quick test:\n-d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}' = BJ python3.11\nInternal Server Errorg I >] zsh\n@ bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\\n-H \"Content-Type: application/json\" \\ bash oO Copy\n-d '{\"scenario\":\"missed class\", \"\u201curgency\":\"panic\"}' I\nInternal Server Errorg\n\u00a9 bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\ I python \u2014- <<'PyY'\n-H \"Content-Type: application/json\" : 5 Fi .\nSe Ee Seer aoe Bi ee yy RaaflaC I import os, dotenv, google.generativeai as genai, json\nfeta. sai Errorg ; , L dotenv.load_dotenv('.env', override=True)\n\u00ae bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % python - <<'PY' o o 9 _\nimport os, google.generativeai as genai, dotenv, json genal. configure ( api_key=os . getenv( \"\u201cGEMINI_KEY\" )\ndotenv. load_dotenv('.env', override=True) I m = genai.GenerativeModel(\"models/gemini-pro\" )\naac ee eases ert erie ment =r te | print (json.loads(m.generate_content('Respond with JSON: {\"hello\":\"world\"}\nprint (json. loads(m.generate_content(\"Respond with JSON: {\\\"hello\\\":\\\"world\\\"}\"). text) ) PY |\nPY\nTraceback (most recent call last): ; 4\nFile \"<stdin>\", line 1, in <module>\n(2) ModuleNotFoundError: No module named \u2018google\u2019 You should see {'hello': '\u2018world'}.\n@ bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % source .venv/bin/activate\n> OUTLINE @ (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % which python\n$03 /Users/bhuvanarora/excuse-generator/.venv/bin/python | 4\n> TIMELINE (.venv) bhuvanarora@Bhuvans-MacBook-Pro excuse-generator % ff 6 excuse_api.py x\nw&y % main* \u00ae@ @oA4 Q_Ln15,Col45 Spaces:4 UTF-8 LF {} Python @ 3.13.264-bit (@\n= , \u2014\u2014 : =| Message Bhuvan\n= + @ & \u00a2 @\nB file.pdf ITRV (1).pdf ITRV.pdf JETIR2101184 Iko to mtj Iko to MTJ (1).pdf Iko to MTJ-\\.-= \u2014\u2014 TTT\n\n880068820 OD\n\ne : \u00a9) |\n\u2014 ~~\n. . ."
}