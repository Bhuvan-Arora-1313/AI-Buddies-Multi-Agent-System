{
  "timestamp": "2025-07-02_12-48-48",
  "active_window": "firefox",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "git push",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n# --- Gemini via LangChain (REST v1) ---\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.schema import SystemMessage, HumanMessage\n\n# expose key for LangChain wrapper\nos.environ[\"GOOGLE_API_KEY\"] = os.getenv(\"GOOGLE_API_KEY\")  # must be in .env\n\nllm = ChatGoogleGenerativeAI(\n    model=\"gemini-2.5-flash\",          # free\u2011tier model\n    temperature=0.8,\n    convert_system_message_to_human=True\n)\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n    mode: str = \"normal\"   # \"normal\" | \"apology\"\n    language: str = \"en\"   # ISO code, e.g. \"en\", \"es\", \"fr\"\n\nclass EmergencyRequest(BaseModel):\n    number: str\n    message: str\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    style_clause = (\n        \"Respond in a guilt\u2011tripping, heartfelt apology tone.\"\n        if r.mode.lower() == \"apology\"\n        else \"Respond in a neutral, believable tone.\"\n    )\n    # language directive\n    lang_clause = (\n        \"\" if r.language.lower() in [\"en\", \"english\"] else\n        f\"Respond in {r.language} language.\"\n    )\n    full_prompt = (\n        f\"{SYSTEM_PROMPT}\\n\"\n        f\"Tone: {style_clause}\\n\"\n        f\"{lang_clause}\\n\"\n        f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    )\n    messages = [\n        SystemMessage(content=SYSTEM_PROMPT),\n        HumanMessage(content=full_prompt)\n    ]\n    response_text = llm(messages).content.strip()\n    # LangChain may wrap JSON in ``` blocks \u2013 strip them\n    if response_text.startswith(\"```\"):\n        response_text = response_text.strip(\"`\").lstrip(\"json\").strip()\n    out = json.loads(response_text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]\n\n# ---------- /emergency ----------\n@app.post(\"/emergency\")\ndef emergency(req: EmergencyRequest):\n    \"\"\"\n    Simulate sending an emergency SMS/call.\n    For the demo we just log the request and append an entry to history.json.\n    \"\"\"\n    entry = {\n        \"id\": f\"emergency-{int(time.time())}\",\n        \"ts\": time.time(),\n        \"excuse\": \"EMERGENCY TRIGGER\",\n        \"believability_score\": 1.0,\n        \"chat_log\": f\"Sent '{req.message}' to {req.number}\"\n    }\n    history = json.loads(DATA.read_text())\n    history.append(entry)\n    DATA.write_text(json.dumps(history, indent=2))\n    return {\"status\": \"sent\", \"to\": req.number, \"msg\": req.message}",
  "ocr_text": "oe \u00a9 oO D\n\nM Flipkart GRiD 7.0 | Full-Time SDE X my Boost Your Career with MyCare\u00ab X \u00ae) Coffee & Calm - YouTube x () Bhuvan-Arora-1313/excuse-gen X\n\n\u20ac<\u20ac ~ CQ \u00a9 8 = github.com/Bhuvan-Arora-1313/excuse-generator\n\n= ww) Bhuvan-Arora-1313 / excuse-generator\n\n<> Code \u00a9 Issues { Pullrequests \u00a9) Actions [A Projects OO) Wiki \u00a9 Security [\u00a5 Insights \u20188 Settings\n\n@ excuse-generator \u00b0uviic\n\nP main ~ \u00ae 1Branch \u00a9 0 Tags Q Goto file\n\n+\n\nt\n\nSs? Pin @\u00ae Watch O\n\nte) Bhuvan-Arora-1313 feat: add multi-language support (language field) and keep apolog... 800a8a1-6 minutes ago ) 3 Commits\n\n{| README.md docs: complete README 1 hour ago\n{5 excuse_api.py feat: add multi-language support (language field) and kee... 6 minutes ago\n{5 history.json feat: complete Excuse Generator API (generate, top, eme... 1 hour ago\n{5 requirements.txt feat: complete Excuse Generator API (generate, top, eme... 1 hour ago\n(1) README GC =\nIntelligent Excuse Generator\nFastAPI service that produces believable excuses, stores history, ranks by score,\nand simulates an emergency SMS\u2014powered by Google Gemini (via LangChain).\n1-Setup\ngit clone https://github. com/Bhuvan-Arora\u20141313/excuse-generator.git O\ncd excuse-generator\npython -m venv .venv && source .venv/bin/activate # Windows: .venv\\Scripts\\activate\npip install -r requirements.txt\nCreate a .env file:\nGOOGLE_API_KEY=AI\u2014XXXXXXXXXXXXXXXXXXXXXXXX O\n\nv\n\nBw\n\nQ Type (/] to search\n\n\u00a5 wy Star 0 \u00a5\n\nAbout or\n\nNo description, website, or topics\nprovided.\n\nQO Readme\nActivity\nO stars\n\n0 watching\n\ncont\n\n0 forks\n\nReleases\n\nNo releases published\nCreate a new release\n\nPackages\n\nNo packages published\nPublish your first package\n\nLanguages\n\n\u2014\u2014EEEEEEEEEEEE\n\u00a9 Python 100.0%\n\nSuggested workflows\nBased on your tech stack\n\nSLSA Generic Configure\ngenerator\n\nGenerate SLSA3 provenance for your\nexisting release workflows"
}