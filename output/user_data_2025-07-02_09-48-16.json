{
  "timestamp": "2025-07-02_09-48-16",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "\u00e9\n\nOw \u00ae OF\n\nCode File Edit Selection\n]\n\n\u20ac > CGC @\n\n& eee\n\n| oO EXPLORER\n\n\\Y EXCUSE-GENERATOR\n\nView Go Run Terminal Window\u2019 Help\n\nx F x co x co\n\nO OD file:///Users/bhuvanarora/Downloads/Artificial_Intelligence_Capstone_Project.pdf.pdf\n\nBy\n\nS PP excuse-generator\n\nx Welcome @ excuse_api.py 4,U X .env U\n\n@ excuse_api.py > ...\n\nbow\nby %\n\nSR cat #_excuserapixpy ES\nSon import os, json, time, hashlib\n\nof > include from pathlib import Path\nA) from dotenv import load_dotenv\n\nEe pyvenv.cfg ee\n\n.env\n\n@ excuse_api.py\n\n{} history.json\n= requirements.txt\n\n> OUTLINE\nsp\n> TIMELINE\n\nWHILE mins @ @0A4\n\n4,\n\nc cHmcc\n\n5 load_dotenv() # \u2014 NEW:\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n\nsimple \u201cDB\u201d\n\nDATA = Path(\"history. json\")\n\nif not DATA.exists():\nDATA.write_text(\"[]\")\n\nfo SSS OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\") )\nPROBLEMS @ OUTPUT DEBUG CONSOLE TERMINAL PORTS.\n\n@ bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'\nInternal Server Errorg\nbhuvanarora@Bhuvans-MacBook-Pro excuse-generator % | |\n\nQ_Ln5,Col63 Spaces:4 UTF-8\n\npulls OPENAI_API_KEY from .env\n\nLF\n\n+u +. nA xX\n\n>.) python3.11\n>-| zsh\n\n{} Python & 3.13.264-bit QI\n\n34%8) =>\n\nG@ROTO8\n\nx M x Artificial_Intelligence_Capstone_ X @\n\nIntelligent Excuse Generator Plan >\nBhuvan\n\npython\n\nimport os, json, time, hashlib\nfrom pathlib import Path\n\nfrom dotenv import load_dotenv\nload_dotenv()\n\nfrom fastapi import FastAPI\n\n3. Save the file (3S / Ctrl S).\n\n4. In the terminal (still inside (.venv)):\nbash\n\nuvicorn excuse_api:app --reload\n\nINFO: Uvicorn running on http://127.0.0.1:8000\n\n5. Open a second terminal tab (_) and test:\nbash\n\ncurl -X POST http://127.0.0.1:8000/generate \\\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}!\n\nYou should receive your first JSON excuse. 3\n\n(If you haven't created . env yet, make the file \u2018th one line\nv\nOPENAI_API_KEY=sk-xxxxxxxx in the proj. _. root, then repeat step 4.)\n\nMessage Bhuvan\n\n+ @\u00ae@ ov\n\nS800eEGE820 \u00a9O8F\u00b010 &*\n\n@ Wed Jul 2 9:48AM\n\nx\n\ncm \u00bb\n\u00a9) Copy\n\n\u00a9) Copy\n\n\u00a9) Copy\n\n=]"
}