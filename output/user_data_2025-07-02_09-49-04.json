{
  "timestamp": "2025-07-02_09-49-04",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "ChatGPT File Edit\n\neC > G @\n\nView\n\n&\n\n@ O\n\nEXPLORER\n\nV EXCUSE-GENERATOR\n> __pycache__\n\n\u00a9\n\nv venv\n> bin\n> include\n> lib\npyvenv.cfg\n.env\n@ excuse_api.py\n{} history.json\n= requirements.txt\n\n> OUTLINE\n> TIMELINE\n\nWE & maine @0A4\n\nWindow\n\nU\nU\n4,U\nU\nU\n\nHelp \u00a9 8 \u00a9O O 8 2%) F Q S @ Wed Jul2 9:49AM\nx 2 x co x co x ca x M x Artificial_Intelligence_Capstone_ X @ x\nO OD file:///Users/bhuvanarora/Downloads/Artificial_Intelligence_Capstone_Project.pdf.pdf eee OG Intelligent Excuse Generator Plan > CS =\nBhuvan\n<\u20ac excuse-generator 8 Y 0s oO (oa % \u00bb\nxJ Welcome > ease eaigy 40 % \u2018env oU Dy % AuthenticationError: Incorrect API + Open .env and double-check you pasted the\n>) @VESAGL GI D on key provided whole key\u2014no extra spaces.- Restart the server\n# excuse_api.py = after editing . env.\nimport os, json, time, hashlib\nfrom pathlib import Path 404: model_not_found or The model Your key doesn't have that model.Quick swap:\nfrom dotenv import load_dotenv gpt-40-mini does not exist in excuse_api.py changemodel=\"gpt\u201440-\n5 load_dotenv() # \u2014 NEW: pulls OPENAI_API_KEY from .env mini\" > model=\"gpt-3.5-turbo\" (or any\nfrom fastapi import FastAPI model your key supports), save, restart uvicorn.\nfrom pydantic import BaseModel . . .\npeeeeeaeeneenne json.decoder.JSONDecodeError at the The LLM returned text that isn't valid JSON\nfrom openai import OpenAI . . , .\nwe json.loads(res.choices[@]... line (rare but possible). Add\n4 \u2014\u2014\u2014__-___ simple \u201cDB\u201d ---------- print(res.choices[@].message.con\u2014\nnie ; 7 tent) in that block to inspect.\nDATA = Path(\"history.json\")\nif not DATA.exists():\nDATA.write_text(\"[]\") # seed empty list After each change Ctrl-C the uvicorn process and run it again so it reloads the new code / env.\n(SSS OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAT_API_KEY\") ) .\niS u 2 ~ 3 Re-test quickly\nPROBLEMS @ OUTPUT DEBUG CONSOLE TERMINAL PORTS. ar v o AS ect fa Copy\n@ bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\ p >.) python3.11\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}' 2.) zsh\n\nInternal Server Errorg\nbhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % o\n\nQ LF\n\nLn 5,Col63 Spaces:4 UTF-8\n\n{} Python\n\n&8 3.13.2 64-bit\n\ncurl -X POST http://127.0.0.1:8000/generate \\\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}!\n\n+ Success = you get a JSON excuse. Proceed to pip freeze, git add, git commit, git\npush.\n\n+ Still 500 = paste the red traceback here (or y_ last error line) and I'll zero in on it.\n\u20ac Work with Code Tab x\n\nfa\\\n\nMessage Bhuvan\n\n+ @\u00ae ov\n\n\u00a9"
}