{
  "timestamp": "2025-07-02_10-44-49",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "python - <<'PY'\nimport os, dotenv, google.generativeai as genai, json\ndotenv.load_dotenv('.env', override=True)\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nm = genai.GenerativeModel(\"models/gemini-pro\")\nprint(json.loads(m.generate_content('Respond with JSON: {\"hello\":\"world\"}').text))\nPY",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"models/gemini-pro\")\nprint(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "6\n\no\nS\n\n\u00a9\n\nCode File Edit Selection\n= List of research\n\u20ac > CG @\n0@e@8\n\n| EXPLORER\n\nje)\n\nV EXCUSE-GENERATOR\n> __pycache__\nv venv\n> bin\n> include\n> lib\n\u00a9 pyvenv.cfg\n\u00a9 .env\n\nU\nU\n@ excuse_api.py 4,U\n{} history.json U\n\nU\n\nr\n2\nFR\nA\n\n= requirements.txt\n\n@\n> OUTLINE\na > TIMELINE\n\nUE & mains @ @0A4\n\nGo Run_ Terminal Window\u2019 Help\n\n& Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Cc ca LAUNCHED Glok M Launched - Artif\n\nO 8 =\n\naistudio.google.com/apikey\n\n< PP excuse-generator By\nx Welcome @ excuse_api.py 4,U @\u00ae % .env U\n@ excuse_api.py > ...\n7\n8\n\n9 from fastapi import FastAPI\n\n10 from pydantic import BaseModel\n\n11\n\n12 import google.generativeai as genai\nPROBLEMS @ OUTPUT DEBUG CONSOLE TERMINAL PORTS\n\ndotenv. load_dotenv('.env', override=True)\ngenai. configure(api_key=os.getenv(\"GEMINI_KEY\") )\nm = genai.GenerativeModel(\"models/gemini-pro\")\nprint(json. loads(m.generate_content('Respond with JSON: {\"hello\":\"world\"}').text))\nPY\nTraceback (most recent call last):\nFile \"<stdin>\", line 5, in <module>\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/generativeai/generative_models\n-py\", line 331, in generate_content\nresponse = self._client.generate_content(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/ai/generativelanguage_vibeta/s\nervices/generative_service/client.py\", line 835, in generate_content\nresponse = rpc(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/gapic_v1/method. py\",\nline 131, in __call__\nreturn wrapped_func(xargs, **kwargs)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 294, in retry_wrapped_func\nreturn retry_target(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 156, in retry_target\nnext_sleep = _retry_error_helper(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1ib/python3.11/site-packages/google/api_core/retry/retry_base. py\",\nline 214, in _retry_error_helper\nraise final_exc from source_exc\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 147, in retry_target\nresult = target()\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/timeout.py\", line 130\n, in func_with_timeout\nreturn func(*args, +kkwargs)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/grpc_helpers.py\", lin\ne 78, in error_remapped_callable\nraise exceptions. from_grpc_error(exc) from exc\ngoogle.api_core.exceptions.NotFound: 404 models/gemini-pro is not found for API version vibeta, or is not supported\nfor generateContent. Call ListModels to see the list of available models and their supported methods\n(.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % o\n\nQ\n\nITRV (1).pdf\n\nLn 15, Col45 Spaces:\n\nUTF-8 LF {} Python\n\nfile.pdf\n\nITRV.pdf\n\nIko to mtj\n\n880068820 OD\n\nJETIR2101184\n\nArtificial_Intelligence\n\nbow\nby %\n\n+yv ee nA xX\n>.) python3.11\n\n[a\n\nb-J zsh W\n\n&8 3.13.264-bit\n\nIko to MTJ (1).pdf\n\nIko to MTJ-\\-\n\n=\n{ | fi \u00a2\ne : \u00a9)\n\u2014 =\n. . .\n\n20%04) FQ oS\n\nG@ROTO8\n\ncoy API keys - Open/\n\n(B al-05-BBLena \u00a9 Openal \u00a9 Gemini API refer 96 Get API key | G X\n\nIntelligent Excuse Generator Plan >\nBhuvan\n\nThought for 10 seconds\n\n| can see from the traceback that the request is still sent to the v1 beta endpoint and is looking\nfor\n\nmodels/gemini-pro, which that old endpoint can't serve.\n\nWith the new SDK (0.8.5) you should pass the plain model ID (\"gemini-\u2014pro\") when you build\nthe model object \u2014not the full \u201cmodels/...\u201d path.\n\nQuick 2-line fix\n\npython \u00a9) Copy\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\") )\nmodel = genai.GenerativeModel(\"gemini-pro\" )\n\n(Make sure there\u2019s only one import / configure / model block in the file.)\n\nThen restart everything cleanly\n\nhach\n\u00a9 excuse_api.py x\n\nMessage Bhuvan\n\n+ \u00ae\n\nCD\nWw\n\n@ Wed Jul 2 10:44AM"
}