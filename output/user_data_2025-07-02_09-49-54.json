{
  "timestamp": "2025-07-02_09-49-54",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "@ ChatGPT File Edit\n\nSC > G\u00e9#A\n&D\n\nView\n\n@ O\n\nEXPLORER\n\nV EXCUSE-GENERATOR\n> __pycache__\n\n\u00a9\n\nVv .venv\n> bin\n> include\n> lib\npyvenv.cfg\n.env\n@ excuse_api.py\n{} history.json\n= requirements.txt\n\n> OUTLINE\n> TIMELINE\n\nGE & mains @0A4\n\nWindow\n\nU\nU\n4,U\nU\nU\n\n@ bhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\ >.\n\nHelp\n\nx > x co x co x\n\nO OD file:///Users/obhuvanarora/Downloads/Artificial_Intelligence_Capstone_Project.pdf.pdf\n\nB-~ bO &\n\nS excuse-generator\n\n>} Welcome \u00ae@ excuse_api.py 4,U X\n\n-env U\n\nDy %\n\n@ excuse_api.py > ...\n\n# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\n\n5 load_dotenv() # < NEW:\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n\npulls OPENAI_API_KEY from .env\n\nsimple \u201cDB\u201d\n\nDATA = Path(\"history.json\")\n\nif not DATA.exists():\nDATA.write_text(\"[]\")\n\nOpenAI client\n\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\") )\n\nPROBLEMS @ OUTPUT DEBUG CONSOLE TERMINAL PORTS tues a\n\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'\n\nInternal Server Errorg\n\nbhuvanarora@Bhuvans\u2014MacBook-Pro excuse-generator % o\n\n>-} zsh\n\nQ Ln5,Col63 Spaces:4 UTF-8 LF\n\n{} Python\n\n&8 3.13.2 64-bit\n\nx\n\npython3.11\n\nfa\\\n\nx mM\nZ\neee ce) Z Bhuvan\nwen\u201d uU Ww\n\n\u00a9 fF CO08\n\nx Artificial_Intelligence_Capstone_ X\n\n34% @\n\nIntelligent Excuse Generator Plan >\n\nThought for a couple of seconds\n\nse Q BS 6 Wed Jul2 9:49AM\n\nx YY\n\n6d\nBa) | >\nhow can i ge my pi key\n\nHere's how to get a secret OpenAl API key you can drop into your . env file:\n\nStep\n\n1. Signin\n\n2. Open \u201cAPI Keys\u201d\n\n3. Create a new key\n\n**4. Copy immediately\n\n5. Store it in your project\n\n6. Keep it secret\n\n( Work with Code Tab x\nMessage Bhuvan\n\n+ @\u00ae ov\n\nWhat to do\n\nGo to https://platform.openai.com and log in\nwith your OpenAl account. (If you don't have\none, click Sign Up > verify email & phone.)\n\nClick your avatar (bottom-left) > \u201cView API\nkeys\u201d.\n\nPress \u201cCreate new secret key\u201d > give ita\nlabel such as \u201cexcuse-generator\u201d > Create.\n\nClick \u201cCopy\u201d. You'll never be able to see it\nagain once you close the modal.\n\nIn VS Code: open your .env file and paste:\nOPENAI_API_KEY=sk\u20144fG3XXXXXXXXXXXX\nXXXXXXXXXXXXXXXX\n\n- Do not commit . env to Git. - If the key ever\nleaks, hit \u201cRevoke\u201d on the same page and\ncreate a new one.\n\nVv\n\nS80%\u00b0eSe20 0820 Ff\n\nWhere / what it looks lik:\n\nBrowser\n\nLeft-side column shows i\n\nA one-time modal appeal\nstarting with sk-....\n\nClipboard now holds sorr\nlike:sk-\u20144\u00a3G3XXXXXXXX)\nXXXX\n\nSave (#S / Ctrl S).\n\n=]"
}