{
  "timestamp": "2025-07-02_10-49-50",
  "active_window": "ChatGPT",
  "focused_text": "ti",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"gemini-pro\")\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "ChatGPT File Edit View Window\u2019 Help 6 \u00a38 \u00a9 GD SwmMHes) F Se @ Wed Jul 2 10:49AM\n\nOw \u00ae 0\n\n= List of research @ Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Co ca LAUNCHED Glob M Launched - Artif Artificial_Intelligence | Al-05-BBLEN4 \u00a9 Openal o API keys - Open/ (G) Gemini API refers * Get API key | G X\n\u20ac > Ca O & 2 aistudio.google.com/apikey eee OZ Intelligent Excuse Generator Plan > SC ~ =\nBhuvan\nGoogle INES ello) 1. Delete or comment out that line. Bo\n<5 PP excuse-generator By Bot python \u00a9 Copy\nEXPLORER 90 Welcome @ excuse_api.py 4,U X % .env U Dy\nom an \u00a9 .\nVv EXCUSE-GENERATOR @ excuse_api.py > ...\nP > __pycache__ 11\nih, Us: v env q q q q\n5 oh 12 import google.generativeai as genai\n= ch oe > include 13 genai.configure(api_key=os.getenv(\"GEMINI_KEY\") ) 2. Restart Uvicorn cleanly:\n> \u00ae Ills 14 model = genai.GenerativeModel(\"gemini-pro\")\n\u00a9 pyvenv.cfg U . .\n\u00a9 env ' 15 #print(\">>> model being used:\", model._name) bash \u00a9) Copy\nBS \u00ae excuse_api.py 4,U 16 # ---------- simple \u201cDB\u201d ---------- ctri-c\n{} history.json U r = ;\nA SEEGER PROBLEMS @ OUTPUT DEBUGCONSOLE TERMINAL PORTS. tye uvicorn excuse_api:app \u2014\u2014-reload\n7, in run a 2} pythe\nresult = context.run(func, *args) 2) zsh\n\nFile \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 43, in generate\nout = json. loads (model. generate_content(full_prompt) .text) 3. Test:\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/generativeai/generative_models\n-py\", line 331, in generate_content L\nresponse = self._client.generate_content( bash O) Copy\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/ai/generativelanguage_vibeta/s\nervices/generative_service/client.py\", line 835, in generate_content\n\nresponse = rpc( curl -X POST http://127.0.0.1:8000/generate \\\n\nanne \" \u00b0 ; ; i \"\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/gapic_v1/method. py\", H \"Content Type: application/json \\ .\nline 131, in __call__ -d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}'\nreturn wrapped_func(xargs, **kwargs) o\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 294, in retry_wrapped_func |\nreturn retry_target(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 156, in retry_target\nnext_sleep = _retry_error_helper( 1\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1ib/python3.11/site-packages/google/api_core/retry/retry_base. py\",\nline 214, in _retry_error_helper\nraise final_exc from source_exc\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\" \u00ae\n, line 147, in retry_target\n\n\u00a9 excuse_api.py x\n\nresult = target() >)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/timeout.py\", line 130\n, in func_with_timeout\nreturn func(*args, +kkwargs)\n\n@ File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/grpc_helpers.py\", lin\ne 78, in error_remapped_callable\nraise exceptions. from_grpc_error(exc) from exc til\n> OUTLINE google.api_core.exceptions.NotFound: 404 models/gemini-pro is not found for API version vibeta, or is not supported\n$03 for generateContent. Call ListModels to see the list of available models and their supported methods.\n> TIMELINE 0 cL \u00ae cn )\n. L | % main* \u00ae@ @oA4 Q Ln15,Col2 Spaces:4 UTF-8 LF {} Python @ 3.13.264- Ww Y\nView status 5: -\n\nbal\n\\"
}