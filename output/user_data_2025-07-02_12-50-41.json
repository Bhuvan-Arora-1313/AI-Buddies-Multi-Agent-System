{
  "timestamp": "2025-07-02_12-50-41",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "git push",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n# --- Gemini via LangChain (REST v1) ---\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.schema import SystemMessage, HumanMessage\n\n# expose key for LangChain wrapper\nos.environ[\"GOOGLE_API_KEY\"] = os.getenv(\"GOOGLE_API_KEY\")  # must be in .env\n\nllm = ChatGoogleGenerativeAI(\n    model=\"gemini-2.5-flash\",          # free\u2011tier model\n    temperature=0.8,\n    convert_system_message_to_human=True\n)\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n    mode: str = \"normal\"   # \"normal\" | \"apology\"\n    language: str = \"en\"   # ISO code, e.g. \"en\", \"es\", \"fr\"\n\nclass EmergencyRequest(BaseModel):\n    number: str\n    message: str\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    style_clause = (\n        \"Respond in a guilt\u2011tripping, heartfelt apology tone.\"\n        if r.mode.lower() == \"apology\"\n        else \"Respond in a neutral, believable tone.\"\n    )\n    # language directive\n    lang_clause = (\n        \"\" if r.language.lower() in [\"en\", \"english\"] else\n        f\"Respond in {r.language} language.\"\n    )\n    full_prompt = (\n        f\"{SYSTEM_PROMPT}\\n\"\n        f\"Tone: {style_clause}\\n\"\n        f\"{lang_clause}\\n\"\n        f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    )\n    messages = [\n        SystemMessage(content=SYSTEM_PROMPT),\n        HumanMessage(content=full_prompt)\n    ]\n    response_text = llm(messages).content.strip()\n    # LangChain may wrap JSON in ``` blocks \u2013 strip them\n    if response_text.startswith(\"```\"):\n        response_text = response_text.strip(\"`\").lstrip(\"json\").strip()\n    out = json.loads(response_text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]\n\n# ---------- /emergency ----------\n@app.post(\"/emergency\")\ndef emergency(req: EmergencyRequest):\n    \"\"\"\n    Simulate sending an emergency SMS/call.\n    For the demo we just log the request and append an entry to history.json.\n    \"\"\"\n    entry = {\n        \"id\": f\"emergency-{int(time.time())}\",\n        \"ts\": time.time(),\n        \"excuse\": \"EMERGENCY TRIGGER\",\n        \"believability_score\": 1.0,\n        \"chat_log\": f\"Sent '{req.message}' to {req.number}\"\n    }\n    history = json.loads(DATA.read_text())\n    history.append(entry)\n    DATA.write_text(json.dumps(history, indent=2))\n    return {\"status\": \"sent\", \"to\": req.number, \"msg\": req.message}",
  "ocr_text": "ChatGPT File Edit View Window\u2019 Help 3 100% SF Q YS SO Wed Jul2 12:50PM\n+\n\n6 (G) 9 Get API key | G X\n\nw\n\nCore Features Designed:\nee OG Intelligent Excuse Generator Plan >\n\n1. Al-Generated Excuses \u2014 Context-based excuse suggestions (work, school, social, family). Bhuvan\n\n2. Scenario-Based Customization \u2014 Allows users to refine excuses based on urgency and\n\nbelievability. do the necessary chanegs\n3. Proof Generator \u2014 Al-generated documents, chat screenshots, and location logs to support\n\nexcuses.\n\n4. Emergency Call & Text System \u2014 Auto-triggers fake emergency messages or calls. r)\n\n5. Al Guilt-Tripping Apology Generator \u2014 Auto-creates professional or emotional apologies.\n6. Voice & Text Integration \u2014 Generates excuses in both written and speech format for added\n\nrealism.\n\n7. Excuse History & Favorites \u2014 Users can save frequently used excuses for quick access.\n\nsupport@launched org in\n\nitent.strip()\n\n'):\n\u00bbStrip(\"*\").Ustr\n\nLaunchzd\n\nionWarning: The method \u201cBas\ninstead.\n\n7 7 . \u2018Langchain_google_genai/chat,\n8. Auto-Scheduling \u2014 Al predicts when an excuse might be needed based on past patterns.\n\n9. Multi-Language Support \u2014 Excuses available in different languages for global use.\n10. Smart Excuse Ranking \u2014 Al ranks the best possible excuse based on past effectiveness. langchain_google_genai/chat.\n\nDeliverables:\n+ Al-powered excuse generation model\n* Proof generator and emergency alert system\n\n+ Excuse ranking and history feature se_api.py README.md\n\n+ Final Al deployment and documentation jd EKER EGE (iMUissl VENEERS\n\nep apology mode\n\n\u20ac\u00a9 excuse_api.py x\n\nMessage Bhuvan\n1 Arora(now) Q_ Ln 69, Col 2\n\nFer + @ 0\n~~ | 980%\u00b068820 OP008 AF,"
}