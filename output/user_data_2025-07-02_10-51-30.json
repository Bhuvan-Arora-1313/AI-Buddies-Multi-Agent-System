{
  "timestamp": "2025-07-02_10-51-30",
  "active_window": "ChatGPT",
  "focused_text": "u yourselfd make the",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"gemini-pro\")\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "ChatGPT File Edit View Window\u2019 Help 6 \u20ac8 \u00a9 DW S 32%%) F Q S \u00a9 Wed Jul2 10:51AM\n\nOw \u00ae 0\n\n= List of research @ Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Co ca LAUNCHED Glob M Launched - Artif Artificial_Intelligence | Al-05-BBLEN4 \u00a9 Openal o API keys - Open/ (S) Gemini API refer * Get API key | GX\n4 B q 5 6 =\n\u20ac > C a O 86 & aistudio.google.com/apikey eee OG Intelligent Excuse Generator Plan > -_ =\nBhuvan Oo\nYSMaALe CYT LYULOVL GV _NAOYrydse YOUCIIVA VLIMLINE NLT dd\n\nGoogle Al Studio \u00a9 Copy Bo\n\nmodel = genai.GenerativeModel(\"models/gemini-pro\" )\n\n\u20ac_ 5 PP excuse-generator By 08 \u00a9 ft\n\nEXPLORER ote Welcome @ excuse_api.py 4,U X & .env U Py &% 2 a\nfom ay oO ne : from fastapi import FastAPI\nV EXCUSE-GENERATOR \u00ae excuse_api.py > ... from pydantic import BaseModel\nP > _pycache__ 11 app = FastAPI()\nih, Us: v env q q q q\n5 oh 12 import google.generativeai as genai\n= ch & > fineiingts 13 genai.configure(api_key=os.getenv(\"GEMINI_KEY\") ) Inside your /generate route\n> > id 14 model = genai.GenerativeModel(\"gemini-pro\")\n\u00a9 pyvenv.cfg U . .\nean uy 15 #print(\">>> model being used:\", model._name) python \u00a9) Copy\nBS \u00ae excuse_api.py 4,U 16 # ---------- simple \u201cDB\u201d ---------- . .\nraiietorvicen i full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urge\n. PROBLEMS @ OUTPUT DEBUGCONSOLE TERMINAL PORTS. tue\nA = requirements.txt U \u2014\n7, in run r { 2} pyth\u00ab\n\" \u201cresult = context.run(func, xargs) Sau raw = model.generate_content([full_prompt]).text\nAAAAAAAAAAAAAAAARARAAAAA out = json.loads(raw)\nFile \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 43, in generate\nout = json. loads (model. generate_content(full_prompt) .text)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/generativeai/generative_models (In the v1 beta stub, genera te content expects alist of strings;\n-py\", line 331, in generate_content L \u2019 \u2014 \u2019\nresponse = self._client.generate_content( passing a single string makes it look for a \u201cgemini-pro\u201d model path and fails.)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/ai/generativelanguage_vibeta/s\nervices/generative_service/client.py\", line 835, in generate_content\nresponse = rpc(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/gapic_v1/method. py\",\nline 131, in __call__\nreturn wrapped_func(*args, *+kwargs) a Restart from a clean slate\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 294, in retry_wrapped_func bash oO Copy\nreturn retry_target(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 156, in retry_target\nnext_sleep = _retry_error_helper( 1 Ctr1-C\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1ib/python3.11/site-packages/google/api_core/retry/retry_base. py\", source .venv/bin/activate\nline 214, in _retry_error_helper 4 _ \" 4 7\nraise final exe from source, exc pkill -f \"uvicorn.*excuse_api\" 2>/dev/null\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\" |\n, line 147, in retry_target . ., __\nRaat = Ganee uvicorn excuse_api:app reload L\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/timeout.py\", line 130\n, in func_with_timeout\nreturn func(*args, +kkwargs)\nAAAAAAAAAAAAAAAAAAAAA flea 8\n@ File \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/google/api_core/grpc_helpers.py\", lin L<) CACNSOETSES\ne 78, in error_remapped_callable\nraise exceptions. from_grpc_error(exc) from exc\n> OUTLINE google.api_core.exceptions.NotFound: 404 models/gemini-pro is not found for API version vibeta, or is not supported u yourself make the c\n$03 for generateContent. Call ListModels to see the list of available models and their supported methods.\n\n> TIMELINE o ab \u00ae \u2018\n\nView stat Ol % main* \u00ae@ @oA4 Q Ln15,Col2 Spaces:4 UTF-8 LF {} Python @ 3.13.264-\n\nco}\n>)"
}