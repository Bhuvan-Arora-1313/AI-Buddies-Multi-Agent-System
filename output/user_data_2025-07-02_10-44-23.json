{
  "timestamp": "2025-07-02_10-44-23",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "python - <<'PY'\nimport os, dotenv, google.generativeai as genai, json\ndotenv.load_dotenv('.env', override=True)\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nm = genai.GenerativeModel(\"models/gemini-pro\")\nprint(json.loads(m.generate_content('Respond with JSON: {\"hello\":\"world\"}').text))\nPY",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"models/gemini-pro\")\nprint(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "Ow \u00ae 0\n\nChatGPT File Edit View\n= List of research\nSerena\n\n| EXPLORER\n\n\\Y EXCUSE-GENERATOR\n\nP > __pycache__\nv .venv\n> bin\noe > include\n> lib\n\n\u00a9 pyvenv.cfg U\n\u00a9 .env U\nES @ excuse_api.py 4,U\n\nU\nU\n\n{} history.json\nA = requirements.txt\n\n@\n> OUTLINE\na > TIMELINE\n\nGE & maine @0A4\n\nWindow\n\nJ Welcome\n\nHelp\n\n* Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Cc ca LAUNCHED Glok \u2122 Launched - Artif\n\nO 8 =\n\n\u20ac >\n\naistudio.google.com/apikey\nP\u00a3 excuse-generator\n\n@ excuse_api.py 4,U @\u00ae % .env U\n\n@ excuse_api.py > ...\n\n7\n\n8\n\n9 from fastapi import FastAPI\n10 from pydantic import BaseModel\n11\n\n12 import google.generativeai as genai\n\nPROBLEMS @ OUTPUT DEBUG CONSOLE TERMINAL PORTS.\n\ndotenv. load_dotenv('.env', override=True) .\ngenai. configure(api_key=os.getenv(\"GEMINI_KEY\") ) I\n= genai.GenerativeModel(\"models/gemini-pro\")\nprint(json. loads(m.generate_content('Respond with JSON: {\"hello\":\"world\"}').text)) ]\nPY\nTraceback (most recent call last): I\nFile \"<stdin>\", line 5, in <module>\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/generativeai/generative_models\u00a7\n-py\", line 331, in generate_content\nresponse = self._client.generate_content( |\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/ai/generat ive language_vibeta/s J)\nervices/generative_service/client.py\", line 835, in generate_content\nresponse = rpc( I\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/gapic_v1/method.py\", 1\nline 131, in __call__\nreturn wrapped_func(xargs, **kwargs)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 294, in retry_wrapped_func I\nreturn retry_target( I\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 156, in retry_target\nnext_sleep = _retry_error_helper(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1ib/python3.11/site-packages/google/api_core/retry/retry_base. py\",\nline 214, in _retry_error_helper\nraise final_exc from source_exc\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 147, in retry_target\nresult = target()\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/timeout.py\", line 130\n, in func_with_timeout\nreturn func(*args, +kkwargs)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/grpc_helpers.py\", lin\ne 78, in error_remapped_callable\nraise exceptions. from_grpc_error(exc) from exc\ngoogle.api_core.exceptions.NotFound: 404 models/gemini-pro is not found for API version vibeta, or is not supported\nfor generateContent. Call ListModels to see the list of available models and their supported methods\n(.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % o\n\nLn 15, Col 45 Spaces 4 UTF-8 LF {} Python\n\nAIEUTIR EAI EY\n\nfile.pdf ITRV (1).pdf ITRV.pdf\n\nIko to mtj\n\nIko to MTJ (1).pdf\n\nJoy cov\n\nArtificial_Intelligence\n\nBOAT\nDy %\n\nA x\n\npython3.11\nzsh\n\n&8 3.13.2 64-bit\n\n= S Message Bhuvan\ncn\nwv\n\nIko to MTJ-s~\n\nGS &F OOO S eH FQ\n\n(B) al-05-BBLEN4 \u00a9 Openal @ apikeys - Open \u00a9 Gemini APirefere\u2019 9 Get API key | G X\n\ni >\neee OG Intelligent Excuse Generator Plan\n\nOpen a new tab, activate again, and retry the quick test:\n\nbash O) Copy\n\npython \u2014- <<'PyY'\n\nimport os, dotenv, google.generativeai as genai, json\n\ndotenv.load_dotenv('.env', override=True)\n\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\") )\ngenai.GenerativeModel(\"models/gemini-pro\" )\n\nprint (json.loads(m.generate_content('Respond with JSON: {\"hello\":\"world\"}\n\nPY\n\nYou should see {'hello': 'world'}.\nIf that works, the SDK + key are fine in the venv.\n\n2 \u2014 Watch the FastAPI logs for the real error\n\n1. Keep the uvicorn tab open (inside the venv).\nYou should see the line we added:\n>>> model being used: models/gemini-pro\n\n2. In another tab (also venv-activated) run:\nbash O) Copy\n\ncurl -X POST http://127.0.0.1:8000 VY nerate \\\n\n\u00a9 excuse_api.py x\n\n\u00a9\n>)\n\nS80\u00b0G8880 eee 70 ae\n\n@ Wed Jul 2 10:44AM"
}