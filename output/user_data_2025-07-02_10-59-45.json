{
  "timestamp": "2025-07-02_10-59-45",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "pip install --upgrade pip\npip install langchain langchain-google-genai",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n# --- Gemini via LangChain (REST v1) ---\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.schema import SystemMessage, HumanMessage\n\n# expose key for LangChain wrapper\nos.environ[\"GOOGLE_API_KEY\"] = os.getenv(\"GOOGLE_API_KEY\")  # must be in .env\n\nllm = ChatGoogleGenerativeAI(\n    model=\"gemini-2.5-flash\",          # free\u2011tier model\n    temperature=0.8,\n    convert_system_message_to_human=True\n)\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    messages = [\n        SystemMessage(content=SYSTEM_PROMPT),\n        HumanMessage(content=full_prompt)\n    ]\n    response_text = llm(messages).content.strip()\n    # LangChain may wrap JSON in ``` blocks \u2013 strip them\n    if response_text.startswith(\"```\"):\n        response_text = response_text.strip(\"`\").lstrip(\"json\").strip()\n    out = json.loads(response_text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "Ow \u00ae OF\n\nCode File Edit Selection View Go Run Terminal Window\u2019 Help\n= List of research @ Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Co ca LAUNCHED Glob M Launched - Artif Artificial_Intelligence\n<\u20ac > CG Ay Oo ra o2 aistue\u2014\u2014\u2014\u2014\nGoogle Al Studio qre] PyCharm Q New !\nee@ <> PP excuse-generator By Cob WwW\nx Welcome @ excuse_api.py5 X % .env U Dy\n\n| oO EXPLORER\n\nv exceus.. 2 GO @\n\n\u00ae excuse_api.py > \u00a9 generate\n\n\u00a9 pyvenv.cfg\n\n61 entry = {\n\"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n\nDEBUG CONSOLE\n\n& .env\n\n\u00ae excuse_api.py 5 62\n\n{} history.json\n\nPROBLEMS @ OUTPUT PORTS\n\n=> BY & oO\n\n- : TERMINAL\n= requirements.txt \u2014\n\npython3.11\nzsh\n\nsubprocess_started\ntarget (sockets=sockets)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/uvicorn/server.py\", line 67, in run &\nreturn asyncio.run(self.serve(sockets=sockets) )\n\nFile \"/Users/bhuvanarora/.pyenv/versions/3.11.13/lib/python3.11/asyncio/runners.py\", line 190, in run Eo!\nreturn runner. run(main)\nFile \"/Users/bhuvanarora/.pyenv/versions/3.11.13/lib/python3.11/asyncio/runners.py\", line 118, in run\nreturn self._loop. run_until_complete(task)\nFile \"/Users/bhuvanarora/.pyenv/versions/3.11.13/lib/python3.11/asyncio/base_events.py\", line 654, in run_until_co\nmplete\nreturn future. result() 1\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/uvicorn/server.py\", line 71, in serve\nawait self._serve(sockets)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/uvicorn/server.py\", line 78, in _serv\ne\nconfig. load()\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/uvicorn/config.py\", line 436, in load\nself. loaded_app = import_from_string(self.app)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/uvicorn/importer.py\", line 19, in imp,\nort_from_string\nmodule = importlib. import_module(module_str)\nFile \"/Users/bhuvanarora/.pyenv/versions/3.11.13/lib/python3.11/importlib/__init__.py\", line 126, in import_module\nreturn _bootstrap._gcd_import(name[level:], package, level)\nARARAAAAARARARALRAAAAAARARAAAARARARAAAAAARABRARARBABABS t\nFile \"<frozen importlib._bootstrap>\", line 1204, in _gcd_import\nFile \"<frozen importlib._bootstrap>\", line 1176, in _find_and_load\nFile \"<frozen importlib._bootstrap>\", line 1147, in _find_and_load_unlocked\nFile \"<frozen importlib._bootstrap>\", line 69@, in _load_unlocked\n\nFile \"<frozen importlib._bootstrap_external>\", line 940, in exec_module :\n\nFile \"<frozen importlib._bootstrap>\", line 241, in _call_with_frames_removed\n\nFile \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 17, in <module> Py\n(@)) os.environ[\"GOOGLE_API_KEY\"] = os.getenv(\"GOOGLE_API_KEY\") # must be in .env\n\nFile \"<frozen os>\", line 684, in __setitem__\nFile \"<frozen os>\", line 758, in encode\nTypeError: str expected, not NoneType\n\n$03 > OUTLINE\n\n> TIMELINE\n\n{ maint @ @OAS5\nView status\n\na |\n\n> _pycache_ 49 def generate(r: Req):\n\nTy ne 58 if response_text.startswith(\"***\"\n> include 59 response_text = response_text.strip(\"*\").lstrip(\"json\").strip| \u2014\n> lp 60 out = json. loads(response_text) -\n\nQ n61,Col14 Spaces:4 UTF-8 LF {} Python & 3.13.264-bit O\n\nS80\u00b0EGE20 ODE\n\n6\u00a9 \u20ac&8 \u00a9OD S&S 4% F Q S \u00a9 Wed Jul2 10:59AM\n\n[| Al-05-BBLEN4 \u00a9 OpenAl coy API keys - Open/ [G) Gemini API refer: +\u201d Get API key | G X\nIntelligent Excuse Generator Plan > \u2014\nBhuvan\n\nAARARARAKRARAAARAAAAARAAAAAAKAAARAARAAAALRAAAAAALARDN\n\nARARAARAAN\n\nFile \"<frozen importlib._bootstrap>\", line 1204, in\n_gcd_import\nShow full message\n\nThought for a second\n\nThe crash is simply because the LangChain packages aren't installed in this virtual-env yet.\n\n1 Install the missing packages (inside the venv)\nbash O) Copy\n\nsource .venv/bin/activate\npip install --upgrade pip\npip install langchain langchain-google-genai\n\n(langchain pulls in langchain-core; the Google wrapper depends on it.)\n\n2 Restart the server\nbash O) Copy\nuvicorn excuse_api:app --reload\n\nYou should now see:\n\n\u00a9) Copy 0\n\n\u00a9 excuse_api.py x\nMessage Bhuvan\n\n+ @ &\n\n=]\n\nfi 9\n\u00a9) | ~~\n."
}