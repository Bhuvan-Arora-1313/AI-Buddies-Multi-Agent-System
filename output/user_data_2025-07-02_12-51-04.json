{
  "timestamp": "2025-07-02_12-51-04",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "git push",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n# --- Gemini via LangChain (REST v1) ---\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.schema import SystemMessage, HumanMessage\n\n# expose key for LangChain wrapper\nos.environ[\"GOOGLE_API_KEY\"] = os.getenv(\"GOOGLE_API_KEY\")  # must be in .env\n\nllm = ChatGoogleGenerativeAI(\n    model=\"gemini-2.5-flash\",          # free\u2011tier model\n    temperature=0.8,\n    convert_system_message_to_human=True\n)\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n    mode: str = \"normal\"   # \"normal\" | \"apology\"\n    language: str = \"en\"   # ISO code, e.g. \"en\", \"es\", \"fr\"\n\nclass EmergencyRequest(BaseModel):\n    number: str\n    message: str\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    style_clause = (\n        \"Respond in a guilt\u2011tripping, heartfelt apology tone.\"\n        if r.mode.lower() == \"apology\"\n        else \"Respond in a neutral, believable tone.\"\n    )\n    # language directive\n    lang_clause = (\n        \"\" if r.language.lower() in [\"en\", \"english\"] else\n        f\"Respond in {r.language} language.\"\n    )\n    full_prompt = (\n        f\"{SYSTEM_PROMPT}\\n\"\n        f\"Tone: {style_clause}\\n\"\n        f\"{lang_clause}\\n\"\n        f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    )\n    messages = [\n        SystemMessage(content=SYSTEM_PROMPT),\n        HumanMessage(content=full_prompt)\n    ]\n    response_text = llm(messages).content.strip()\n    # LangChain may wrap JSON in ``` blocks \u2013 strip them\n    if response_text.startswith(\"```\"):\n        response_text = response_text.strip(\"`\").lstrip(\"json\").strip()\n    out = json.loads(response_text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]\n\n# ---------- /emergency ----------\n@app.post(\"/emergency\")\ndef emergency(req: EmergencyRequest):\n    \"\"\"\n    Simulate sending an emergency SMS/call.\n    For the demo we just log the request and append an entry to history.json.\n    \"\"\"\n    entry = {\n        \"id\": f\"emergency-{int(time.time())}\",\n        \"ts\": time.time(),\n        \"excuse\": \"EMERGENCY TRIGGER\",\n        \"believability_score\": 1.0,\n        \"chat_log\": f\"Sent '{req.message}' to {req.number}\"\n    }\n    history = json.loads(DATA.read_text())\n    history.append(entry)\n    DATA.write_text(json.dumps(history, indent=2))\n    return {\"status\": \"sent\", \"to\": req.number, \"msg\": req.message}",
  "ocr_text": "@ Code\n\nFile Edit\n\nCore Features Designed:\n\nSelection View Go\n\nRun Terminal Window\u2019 Help\n\n1. Al-Generated Excuses \u2014 Context-based excuse suggestions (work, school, social, family).\n\n2. Scenario-Based Customization \u2014 Allows users to refine excuses based on urgency and\n\nLx \u00a5 maint &\n\noO EXPLORER\n\nV EXCUSE-GENERATOR\n> __pycache__\nv venv\n> bin\n> include\n> lib\npyvenv.cfg\n.env\n@ excuse_api.py\n{} history.json\n@ README.md\n= requirements.txt\n\n> OUTLINE\n> TIMELINE\n@0A5\n\n@ excuse_api.py 5 X\n\nPP excuse-generator\n\n{} history.json M @ README.md env U\n\n\u00ae excuse_api.py > \u00a9 generate\n\ndef generate(r: Req):\n\n)\n\nmessages = [\n\nSystemMessage(content=SYSTEM_PROMPT) ,\nHumanMessage(content=full_prompt)\n\n]\n\n76 response_text = 1lm(messages) .content.strip(\n\n# LangChain may wrap JSON in\nif response_text.startswith(\"***\"):\nresponse_text =\n\nPROBLEMS e OUTPUT DEBUG CONSOLE TERMINAL PORTS\n\nresponse_text.strip(\"~\")\n\nmM\n08 \u00a9 Gl\nBy\nblocks \u2014 s7\ntv. A xX\n\n/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/langch \"7 >.) zsh\n\nain_google_genai/chat_models.py:483: UserWarning: Convert_system_message_to_h\n\numan will be deprecated!\nwarnings.warn(\"Convert_system_message_to_human will be deprecated!\")\nINFO: 127.0.@.1:65522 - \"POST /generate HTTP/1.1\" 200 OK\n\n/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/langch\nain_google_genai/chat_models.py:483: UserWarning: Convert_system_message_to_h\n\numan will be deprecated!\nwarnings.warn(\"Convert_system_message_to_human will be deprecated!\")\n\nINFO: 127.0.@.1:65532 - \"POST /generate HTTP/1.1\" 200 OK\nACINFO: Shutting down\n\nINFO: Waiting for application shutdown.\n\nINFO: Application shutdown complete.\n\nINFO: Finished server process [12570]\n\nINFO: Stopping reloader process [11332]\n\n(.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % git add excuse_api\n\n\u00abpy README.md\n\n(.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % git commit -m \"fea\n\nt: add multi-language support (language field) and keep apology mode\"\n\n[main 800a8a1] feat: add multi-language support (language field) and keep apo\n\nlogy mode\n1 file changed, 18 insertions(+), 2 deletions(-)\n(.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % git push\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 657 bytes | 657.00 KiB/s, done.\nTotal 3 (delta 2), reused @ (delta @), pack-reused @\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects\nTo https://github. com/Bhuvan-Arora-1313/excuse-generator.git\n98d2b2a..800a8a1 main -> main\n(.venv) bhuvanarora@Bhuvans-MacBook-Pro excuse-generator % o\n\n>-| zsh\n\n\u00a9 Bhuvan Arora (1 hourago) Q  Ln76,Col50 Spaces:4 UTF-8 LF {} Python @& 3.13.264-bit O\n\nPrevious 30 Days\n\nB= \u2014 1 = | EB\n\n234.3 MB\n\n\u00a9\u00b0eGS20 \u00a99008 !\n\niS)\n\nIntelligent Excuse Generator Plan >\n\nS &\n\n\u00a9 @ 8\n\u00a9\n\n100% a >\n\nQ\n\nS \u00a9 Wed Jul2 12:51PM\n\nSP Get API key | G X\n\nw\n\nBhuvan\n\nprecise edits for you.\nAm 6 Y\nThought for 7 seconds >\n\nEdits to 1 file\n\nB excuse_api.py +9 -2\n\n38 mode: str = \"normal\"\n\n39 language: str = \"en\"\n\n40 voice: bool = False\n\n41\n\n42 class EmergencyRequest(BaseModel):\n\nx 42 lines\n\n85 *kOUt,\n\n86 }\n\n87\n\n88 if r.voice:\n\n89 from gtts import gTTS\n\n90 audio_dir = Path(\"audio\")\n\n91 audio_dir.mkdir(exist_ok=True)\n\n92 audio_file = audio_dir / f\"{entry['id']}.mp3\"\n93 gTTS(out[\"excuse\"], lang=r.language[:2]).save(audio_file.as_posix())\n94 entry[\"audio\"] = str(audio_file)\n95\n\n96 history = json.loads(DATA.read_text())\n\nVoice output added! Now you can request an MP3:\n\n\u00a9 excuse_api.py x\n\nMessage Bhuvan\n\n+ @\u00ae ov\n\nUs\n\nee\n\ndo the necessary chanegs\n\n\u00a9 5 \u00a5\n\neens pememen\n\nReview\n\n\u00a9 Apply\n\nfa)\n\n\u00a9 Copy"
}