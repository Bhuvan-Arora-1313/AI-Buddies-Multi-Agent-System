{
  "timestamp": "2025-07-02_09-41-01",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "@ Code File Edit Selection View Go Run Terminal Window\u2019 Help\n= x GC x  \u00a2o x  \u00a2o x\noO x aN las -\u2122 fon ett seme mo oo ~ =\nee@e@ New File... os oO\niS) 0 EXPLORER ++ 3} Welcom | ony | Dy\nCreate New File (.env) Built-In File $3\n2 V EXCUSE-GENERATOR @ excuse. |\nv venv def generate(r: Req): =\n\u00a9 > bin\n> include )\n@ >i out = json. loads(res.choices[Q] .message. content)\npyvenv.cfg U\n@ excuse_api.py 3,U\n= requirements.txt U entry = {\n\"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n\"ts\": time.time(),\n**\u00abOUt,\n}\nhistory = json. loads(DATA. read_text())\nif entry[\"id\"] not in {h[\"id\"] for h in history}: # de-dupe\nhistory.append(entry)\nDATA.write_text(json.dumps(history, indent=2) )\nreturn entry\n2 === SSS /top?n=5 \u2014---\u2014---\u2014\u2014\n@app.get(\"/top\")\ndef top(n: int = 5):\nhistory = json. loads(DATA. read_text())\nhistory.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n64 return history[:n]\n> OUTLINE\n> TIMELINE\nGE & mains @ @0A3 Q_ n64,Col23 Spaces:4 UTF-8 LF {} Python @ 3.13.264-bit QQ\nSB\n\nG@ROTO8\n\nArtificial_Intelligence_Capstone_ X @\n\n36%8) FF Q\n\nx M x\n\nIntelligent Excuse Generator Plan >\nBhuvan\n\n1 Add the main file\n\n1. In the left Explorer panel, hover next to the folder name > click \u201c+\u201d New File.\n\n2. Type excuse_api.py +.\n\n@ Wed Jul 2 9:41AM\n\nx\n\n& \u00bb\n\n3. Paste the full code | gave (scroll up, copy everything from import os, json... to the final\n\nreturn history[:n]).\n\n4. Save (3S / Ctrl S).\n\n2 Create your environment-variables file\n\nStill in Explorer:\n1. New File > .env\n\n2. Put a single line (replace with your key):\n\nOPENAI_API_KEY=sk\u2014XXXXXXXXXXXXXXXXXXXXXXXX\n\n3. Save. (.env stays local; we won't commit it.)\n\n3 Open VS Code's integrated terminal\n\nMessage Bhuvan\n\n+ @\u00ae ov\n\nS80%G8e880 OOF OG Af\n\n\u00a9) Copy\n\n=]"
}