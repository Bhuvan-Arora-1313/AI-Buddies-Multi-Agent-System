{
  "timestamp": "2025-07-02_10-53-37",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"models/gemini-pro\")\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    out = json.loads(model.generate_content([full_prompt]).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "\u00e9\n\nCode File Edit Selection View\n\nGo Run_ Terminal Window Help\n\n\u00a9 \u20ac8 \u00a9 DBD S 32%%) F Q S \u00a9 Wed Jul2 10:53AM\n\nOw \u00ae OF\n\n= List of research\n\n\u20ac > C\n\nGoogle Al Studio\n\n& Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Co ca LAUNCHED Glob M Launched - Artif\n\nO & = aistudio.google.com/apikey\n\nArtificial_Intelligence\n\n[| Al-05-BBLEN4 \u00a9 OpenAl coy API keys - Open/ (S) Gemini API refere +\u201d Get API key | GX\n\no a 0\nil, Us: as\ncn\n\nL&\nBS\nA\n\n00\n\n@\naD\n\nView |\n\nEXPLORER\n\n\\Y EXCUSE-GENERATOR\n\n> __pycache__\nv venv\n\n> bin\n\n> include\n\n> lib\n\n\u00a9 pyvenv.cfg\n .env\n@ excuse_api.py\n{} history.json\n\n= requirements.txt\n\n> OUTLINE\n> TIMELINE\nmaint @ @Wo0A4\n\n4,U\nU\nU\n\nG&S 2 excuse-generator By\n\nx Welcome @ excuse_api.py 4,U X % .env U\n\u00ae excuse_api.py > \u00a9 generate\n\n40 def generate(r: Req):\n\nbow\nby %\n\n41 prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n42 full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: \u201c~\n43 out = json. loads(model.generate_content( [full_prompt] ).text)\n44 entry = {\n45 \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n\nPROBLEMS @ OUTPUT DEBUG CONSOLE TERMINAL PORTS +v ss NX\nresponse = rpc( pl eeaitenis\n\n\u201cwe : >) zsh\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/gapic_v1/method. py\",\nt\n\nline 131, in __call__\nreturn wrapped_func(xargs, **kwargs)\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"s\n\n, line 294, in retry_wrapped_func\nreturn retry_target(\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n\n, line 156, in retry_target\nnext_sleep = _retry_error_helper(\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_base.py\",\n\nline 214, in _retry_error_helper\nraise final_exc from source_exc\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\u00a7\n\n, line 147, in retry_target\nresult = target()\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/timeout.py\", line 130\n\n, in func_with_timeout\nreturn func(*args, +kkwargs)\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/grpc_helpers.py\", lin\n\ne 78, in error_remapped_callable\nraise exceptions. from_grpc_error(exc) from exc\n\ngoogle.api_core.exceptions.NotFound: 404 models/gemini-pro is not found for API version vibeta, or is not supported\nfor generateContent. Call ListModels to see the list of available models and their supported methods.\n@ (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\\n\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario issed class\",\"urgency\":\"panic\"}'\nInternal Server Errorg\n\n@ (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\\n\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'\nInternal Server Errorg\n\n@ (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/generate \\\n\n-H \"Content-Ty,\n-d '{\"scenario\nInternal Server Errorg\n(.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % | |\n\n: application/json\" \\\nissed class\",\"urgency\":\"panic\"}'\n\nQ  1n43,Col36 Spaces:4 UTF-8\n\n880686\n\nLF {} Python\n\ni\n\n&8 3.13.264-bit O\n\nIntelligent Excuse Generator Plan >\n\nBhuvan\nLooked at Code\n@ 1 file changed Review  & Revert\n excuse_api.py +0 -0 (a)\n\u00bboked at Code\n\n\"e adjusted the /generate route so it now calls\n\n\u2018python @ Copy\n\n_\n\nout = json.loads(model.generate_content([full_prompt]).text)\n\nsing a list as required by the v1 beta API).\nSave is already done.\nRestart Uvicorn:\nbash O) Copy\n\nCtr1-C\nuvicorn excuse_api:app --reload\n\nTest:\nbash O) Copy\n\ncurl -X POST http://127.0.0.1:8000/generate \\\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}'\n\n\u00bbu should now get a JSON excuse.\nany new error appears, let me know\u2014but thi.\u201c t-call is the last piece the v1 beta endpoint\n\nexcuse_api.py X\n\nassage Bhuvan\n\n\u00ae & OT)"
}