{
  "timestamp": "2025-07-02_10-14-10",
  "active_window": "ChatGPT",
  "focused_text": "ok so i am continuing wiht co",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "Ow \u00ae 0\n\nChatGPT File \u2014 Edit\na\na ee)\n\nView\n\n| o EXPLORER\nV EXCUSE-GENERATOR\n> __pycache__\nv venv\n> bin\n> include\n> lib\n\u00a9 pyvenv.cfg\n\u00a9 .env\n\n{} history.json\n\n=> BY & oO\n\nU\nU\n@ excuse_api.py 4,U\nU\nU\n\n= requirements.txt\n\n@\n$03 > OUTLINE\n\n> TIMELINE\n\nWE & maine @0A4\n\nWindow\n\nHelp\n\nx x  \u00a2Oo x  \u00a2Oo x x MoM\n\n\u00a9O 8 = platform.openai.com/settings/organization/api-keys\n\nBOWL\n\n< PP excuse-generator By\n\nx Welcome @ excuse_api.py 4,U X % .env U\n\n@ excuse_api.py > ...\n# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv() # - NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n# ---------- OpenAI client ----------\n\n10 client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\") )\n\nPROBLEMS @ OUTPUT DEBUG CONSOLE TERMINAL PORTS. +yv oe NX\n\n-) python3.11\n>-| zsh\n\nsync\nreturn await get_async_backend().run_sync_in_worker_thread(\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 24\n70, in run_sync_in_worker_thread\nreturn await future\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 96\n7, in run\nresult = context.run(func, xargs) 1.\nFile \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 38, in generate\nres = client.chat.completions.create(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/_utils/_utils.py\", line 287, i\nn wrapper\nreturn func(*args, +kkwargs)\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/resources/chat/completions/com\npletions.py\", line 1087, in create\nreturn self._post(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/_base_client.py\", line 1249, i\nn post\nreturn cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls) ) 1\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAA 1\nt\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/_base_client.py\", line 1037, i\nn request\nraise self._make_status_error_from_response(err.response) from None\nopenai.RateLimitError: Error code: 429 - {'error': {'message': \u2018You exceeded your current quota, please check your p\nlan and billing details. For more information on this error, read the docs: https://platform. openai.com/docs/guides/\nerror-codes/api-errors.', \u2018type': \u2018insufficient_quota', \u2018param': None, \u2018code': \u2018insufficient_quota'}}\nQ  Ln10,Col53 Spaces:4 UTF-8 LF\n\n{} Python @& 3.13.264-bit\n\nx\n\nG6 OTOS8\n\n<n x S x\n\n2%8) FAQS\n\nSo API keys - OpenAl A! X\n\nby a O\n\neee OG Intelligent Excuse Generator Plan >\n\nBhuvan\n\nTypical workflow that teams adopt\n1. VS Code\n+ Everything version-controlled (excuse_api.py, Dockerfile, README).\n+ .env only on your machine / deployment platform.\n+ Run uvicorn inside the integrated terminal for live reload.\n2. GitHub\n- Push > free Cl (optional) > auto-deploy to Render/Fly/Cloud Run.\n3. Colab (notebooks/ folder in the repo)\n+ Prompt experiments, charts, or dataset-building scripts.\n\n+ Results (CSV, JSON) checked into Git or uploaded to S3\u2014not stored in Colab VM.\n\nBottom-line recommendation\n- Primary dev + server hosting: VS Code local > GitHub > free host (Render/Fly/Spaces).\n\n+ Supplemental R&D: keep one or two Colab notebooks for ad-hoc experiments.\n\nThat gives you the best of both worlds and keeps your capstone demo rock-solid.\n\nOvad gy\n\n\u20ac Work with Code Tab x\n\nok soiiam continuing wiht col\n\n+ @\u00ae ov\n\n\u00a9\n\nS800eEGE80 \u00a98210 &*\n\n@ Wed Jul 2 10:14AM"
}