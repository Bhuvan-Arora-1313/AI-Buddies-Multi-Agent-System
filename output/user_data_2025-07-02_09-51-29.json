{
  "timestamp": "2025-07-02_09-51-29",
  "active_window": "firefox",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "\u00e9\n\nFirefox File Edit View\n\nHistory Bookmarks Tools Window Help 6 \u20ac8 \u00a9G O S 3%8) FQ BS @ Wed Jul2 9:51AM\nee@ (ica) =} List of research pape X * Artificial Intelligence X CO NLP_1.ipynb - Colab X CO NLP_1.ipynb - Colab X a LAUNCHED Global X \u2122@ Launched - Artificial X Artificial_Intelligence_Ce X | Al-05-BBLEN4 x \u00a9 Openal x So API keys - OpenAl A! X + Vv\nO <-> C@ O @G = platform.openai.com/settings/organization/api-keys 8 wW +\u00bb on 8 =\nS OpenAl Platform Startbuilding\n2\n\u00a9 SETTINGS API keys\n\nORGANIZATION\n\nAPI keys\n\nPROJECT\n\nCreate new secret key\n\nOwned by\n\nYou Service account\n\nThis API key is tied to your user and can make requests against the\nselected project. If you are removed from the organization or project, this\n\nkey will be disabled.\nName Optional\n\nmykey\n\nProject\n\n| Select project...\n\n\u00a9\n\n| Default project\n\nAll Restricted Read only\n\nCancel\n\nS80\u00b0EGE20 ODE\n\nCreate secret key\n\nAL API\n\n| :\n\u00a9) |\n.\n\n+ Create new secret key"
}