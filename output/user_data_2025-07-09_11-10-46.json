{
  "timestamp": "2025-07-09_11-10-46",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": null,
  "vscode_text": "// Ensure firebase is available globally\nconst firebase = window.firebase;\nconst db = firebase.firestore();\nlet currentUser = null;\nconst SYSTEM_PROMPT = `\nYou are an elite alibi-creator.\nReturn a valid JSON with exactly these keys:\n- \"excuse\" (string, max 50 words)\n- \"believability_score\" (number between 0 and 1)\n- \"chat_log\" (array of 2\u20134 objects with keys: \"sender\" (string), \"message\" (string))\n\nEach chat log object must look like:\n{ \"sender\": \"You\", \"message\": \"your message here\" }\n\nDo not include explanations or markdown. Output raw JSON only.`;\n\nfunction getLocalHistory() {\n  return JSON.parse(localStorage.getItem(\"excuseHistory\") || \"[]\");\n}\n\nfunction saveToLocalHistory(entry) {\n  const history = getLocalHistory();\n  if (!history.find(e => e.id === entry.id)) {\n    history.push(entry);\n    localStorage.setItem(\"excuseHistory\", JSON.stringify(history));\n  }\n}\n\nwindow.signInWithGoogle = function () {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  firebase.auth().signInWithPopup(provider)\n    .then((result) => {\n      const user = result.user;\n    currentUser = user;\n      document.getElementById(\"userInfo\").innerText = `Hello, ${user.displayName}!`;\n\n      const savedKey = localStorage.getItem(user.uid + \"-apiKey\");\n      if (savedKey) document.getElementById(\"apiKey\").value = savedKey;\n\n      document.getElementById(\"apiKey\").addEventListener(\"input\", (e) => {\n        localStorage.setItem(user.uid + \"-apiKey\", e.target.value);\n      });\n      renderTopExcuses();\n    })\n    .catch((error) => {\n      alert(\"Login failed: \" + error.message);\n    });\n};\n\nasync function generateExcuse() {\n  const apiKey = document.getElementById(\"apiKey\").value;\n  const scenario = document.getElementById(\"scenario\").value;\n  const urgency = document.getElementById(\"urgency\").value;\n  const mode = document.getElementById(\"mode\").value;\n  const language = document.getElementById(\"language\").value;\n  const voice = document.getElementById(\"voice\").checked;\n  const output = document.getElementById(\"output\");\n\n  output.innerHTML = \"\u23f3 Asking Gemini (via OpenRouter)...\";\n\n  const tone = mode === \"apology\"\n    ? \"Respond in a guilt\u2011tripping, heartfelt apology tone.\"\n    : \"Respond in a neutral, believable tone.\";\n\n  const langClause = (language === \"en\" || language === \"english\")\n    ? \"\"\n    : `Respond in ${language} language.`;\n\n  const userPrompt = `\n${SYSTEM_PROMPT}\nRespond only with raw JSON \u2014 no Markdown, no explanation.\n\nScenario: ${scenario}\nUrgency: ${urgency}\nTone: ${tone}\n${langClause}\n`.trim();\n\n  try {\n    const response = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\",\n        \"HTTP-Referer\": \"http://localhost\",\n        \"X-Title\": \"Excuse Generator\"\n      },\n      body: JSON.stringify({\n        model: \"google/gemini-2.5-flash-lite-preview-06-17\",\n        messages: [\n          { role: \"system\", content: SYSTEM_PROMPT },\n          { role: \"user\", content: userPrompt }\n        ]\n      })\n    });\n\n    const data = await response.json();\n    const text = data.choices?.[0]?.message?.content || \"\";\n\n    const match = text.match(/{[\\s\\S]+}/);\n    if (!match) {\n      output.innerText = \"\u274c Gemini didn't return JSON:\\n\\n\" + text;\n      return;\n    }\n\n    const parsed = JSON.parse(match[0]);\n    const id = btoa(parsed.excuse).slice(0, 12);\n    const entry = { id, ts: Date.now(), ...parsed };\n    await saveToUserHistory(entry);\n \n   \n\n// Save to Firestore instead of localStorage\nasync function saveToUserHistory(entry) {\n  if (!currentUser) return;\n\n  try {\n    const docRef = db.collection(\"users\").doc(currentUser.uid).collection(\"topExcuses\").doc(entry.id);\n    await docRef.set({\n      excuse: entry.excuse,\n      score: entry.believability_score,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    console.log(\"\ud83d\udd25 Excuse saved to Firestore:\", entry.excuse);\n  } catch (err) {\n    console.error(\"\u274c Failed to save to Firestore:\", err);\n  }\n}\n   \n\n\n    const chatLogHtml = Array.isArray(parsed.chat_log)\n      ? parsed.chat_log\n          .filter(entry => entry && entry.sender && entry.message)\n          .map(entry => {\n            const isUser = entry.sender.toLowerCase() === \"me\" || entry.sender.toLowerCase() === \"you\";\n            return `\n              <div class=\"chat-bubble ${isUser ? 'me' : 'other'}\">\n                <strong>${entry.sender}:</strong> ${entry.message}\n              </div>`;\n          }).join(\"\")\n      : \"<div class='chat-bubble other'>\u26a0\ufe0f Invalid chat log format</div>\";\n\n    output.innerHTML = `\n      <div class=\"excuse-text\"><strong>Excuse:</strong> ${parsed.excuse}</div>\n      <div class=\"score\"><strong>Believability:</strong> ${parsed.believability_score}</div>\n      <div class=\"chat-log\">${chatLogHtml}</div>\n    `;\n\n    if (voice) {\n      const utterance = new SpeechSynthesisUtterance(parsed.excuse);\n      utterance.lang = language || \"en\";\n      speechSynthesis.speak(utterance);\n    }\n\n  } catch (err) {\n    output.innerText = \"\u274c Error generating excuse:\\n\" + err.message;\n  }\n}\n\nfunction renderTopExcuses() {\n  const list = document.getElementById(\"topExcuses\");\n  list.innerHTML = \"\";\n\n  const user = firebase.auth().currentUser;\n  if (!user) {\n    list.innerHTML = \"<li class='list-group-item'>Login to see your top excuses.</li>\";\n    return;\n  }\n  firebase.firestore()\n    .collection(\"users\")\n    .doc(user.uid)\n    .collection(\"topExcuses\")\n    .orderBy(\"score\", \"desc\")\n    .limit(5)\n    .get()\n    .then(snapshot => {\n      if (snapshot.empty) {\n        list.innerHTML = \"<li class='list-group-item'>No excuses saved yet.</li>\";\n        return;\n      }\n\n      snapshot.forEach(doc => {\n        const data = doc.data();\n        const li = document.createElement(\"li\");\n        li.classList.add(\"list-group-item\");\n        li.textContent = `(${data.score}) ${data.excuse}`;\n        list.appendChild(li);\n      });\n    })\n    .catch(err => {\n      console.error(\"Error loading top excuses:\", err);\n      list.innerHTML = \"<li class='list-group-item text-danger'>Error loading excuses.</li>\";\n    });\n}\n\nfunction triggerEmergency() {\n  const number = document.getElementById(\"emergencyNumber\").value;\n  const message = document.getElementById(\"emergencyMessage\").value;\n  const status = document.getElementById(\"emergencyStatus\");\n\n  const entry = {\n    id: \"emergency-\" + Date.now(),\n    ts: Date.now(),\n    excuse: \"EMERGENCY TRIGGER\",\n    believability_score: 1.0,\n    chat_log: `Sent '${message}' to ${number}`\n  };\n\n  saveToLocalHistory(entry);\n  renderTopExcuses();\n  status.innerText = \"\u2705 Emergency logged locally!\";\n}\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  renderTopExcuses();\n});\nfunction copyExcuse() {\n  const text = document.querySelector(\".excuse-text\")?.innerText?.replace(\"Excuse:\", \"\").trim();\n  if (text) {\n    navigator.clipboard.writeText(text);\n    alert(\"Excuse copied to clipboard!\");\n  } else {\n    alert(\"No excuse to copy!\");\n  }\n}",
  "ocr_text": "@ Code\neee\n\nfs\n\nFile Edit\n\nEXPLORER\n\nV EXCUSE-GENERATOR\n> __pycache__\nVv env\n> bin\n\n\u2018we > include\n> lib\n\n& \u00a9 pyvenv.cfg\n\nBe\n\nv audio\n\n\u00a9 .env U\n\nA @ excuse_api.py 6\n{} history.json M\n@ README.md\n\n= requirements.txt\n\n@\n$03 > OUTLINE\n\n> TIMELINE\n\nUE & min co @0A6\n\n\u00a9) e716eb844d1572cc...\n\nSelection View\n\n@ excuse_api.py 6 X\n\nGo\n\nRun\n\n&\n\n@) e716eb844d1572cc476872025c559c0e.mp3\n\n\u00ae excuse_api.py > @ generate\n\n56 def generate(r: Req):\n\nTerminal\n\nWindow\n\nQ\n\nHelp od\n\nPP excuse-generator\n\n>)\n\n@ README.md env u {} history.json NV\n\n= You are sharing your entire screen. \u201cStop Sharing\n\n73 messages = [\n74 SystemMessage(content=SYSTEM_PROMPT) ,\n75 HumanMessage(content=full_prompt)\n76 ]\n77 response_text = llm(messages).content.strip()\n78 # LangChain may wrap JSON in ~*~ blocks \u2014 strip them\n79 if response_text.startswith(\"***\"):\n80 response_text = response_text.strip(\"*\").1lstrip(\"json\").\u00a2\n81 out = json. loads(response_text)\n82 entry = {\n83 \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n84 \"ts\": time. time(),\n85 **OUT ,\n86 Ki\n87 # --- optional voice synthesis \u2014--\nRR if r_wnice:\nPROBLEMS 6 OUTPUT DEBUG CONSOLE TERMINAL PORTS.\n\nbhuvanarora@Bhuvans-MacBook-Pro excuse-generator %\n\n\u00a9 Bhuvan Arora (6 days ago)\n\nG6\u00a9oeoasa\n\n92% FQ\n\n\u00bb)\n\nSe @ Wed Jul9 11:10AM\n\nBy OW\n\u00ae activity: coding\n\u00ae. confidence: 0.99\n\nBB Description:\nwithin an IDE.\nIB Details: Detected Python function definitions (~def generate\u2122),\nmodule usage (~json.loads~, ~time.time~, ~hashlib.md5~), and class\ninstantiations (~SystemMessage\u2019, ~HumanMessage~). The active file\nis ~excuse_api.py~, and the status bar clearly indicates 'Python &\n3.13.2'. The interface displays common IDE elements such as\n\"EXPLORER', 'PROBLEMS', 'OUTPUT', 'DEBUG CONSOLE', 'TERMINAL', and\na project structure for 'EXCUSE-GENERATOR'. The active window is\n'Electron', which is consistent with VS Code.\n\nWM Sources: Screen OCR and Active Window\n\n@ Time: Wed Jul 9 11:10:40 2025\n\nUser is actively writing or reviewing Python code\n\nLn86,Col6 Spaces:4 UTF-8 LF {} Python & 3.13.2\n\nS80\u00b0eEe8E20 O80900\u00b0 2o\u2014\n\nmr mh\n\n>] zsh + v iJ + A\n\na"
}