{
  "timestamp": "2025-07-02_10-15-25",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "@ Code file Edit Selection\n\no\nS\n\n\u00a9\n\nView Go Run Terminal Window\u2019 Help\n\n= List of research pape X Artificial Intelligence X CO NLP_1.ipynb - Colab X CO NLP_1.ipynb - Colab X ca LAUNCHED Global X M Launched - Artificiz\n\n\u20ac > CG @\nee0@\n\n| oO EXPLORER\n\n\\Y EXCUSE-GENERATOR\n\n> __pycache__\nv venv\n\n> bin\n\n> include\n\n> lib\n\n\u00a9 pyvenv.cfg\n\u00a9 .env\n\n@ excuse_api.py\n\n{} history.json\n\n=> BY & oO\n\n= requirements.txt\n\n@\n$03 > OUTLINE\n\n> TIMELINE\n\nGE & mains @0A4\n\n4\n\nU\nU\nU\nU\nU\n\nO 8 = platform.openai.com/settings/organization/api-keys\n\n\u20ac PP excuse-generator By oe |\n\nx Welcome @ excuse_api.py 4,U X % .env U Dy %\n\n@ excuse_api.py > ...\n\n1 # excuse_api.py =\n2 import os, json, time, hashlib =\n3 from pathlib import Path =\n4 from dotenv import load_dotenv\n5 load_dotenv() # \u2014 NEW: pulls OPENAI_API_KEY from .env\n6 from fastapi import FastAPI\n7 from pydantic import BaseModel\n8 from openai import OpenAI\n9 # ---------- OpenAI client ----------\n1@ client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\") )\n11\nPROBLEMS @ OUTPUT DEBUG CONSOLE TERMINAL PORTS. +y sr NX\nreturn await future \u201d [Ezeh\n-| zsh\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 96\"\"\n7, in run\nresult = context.run(func, xargs)\nFile \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 38, in generate\nres = client.chat.completions.create(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/_utils/_utils.py\", line 287, is\nn wrapper\nreturn func(*args, +kkwargs)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/resources/chat/completions/com\npletions.py\", line 1087, in create\nreturn self._post(\nAAAAAAAAAAA [\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/openai/_base_client.py\", line 1249, i\nn post\nreturn cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls) )\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/_base_client.py\", line 1037, i\nn request\nraise self._make_status_error_from_response(err.response) from None a\nopenai.RateLimitError: Error code: 429 - {'error': {'message': \u2018You exceeded your current quota, please check your p\nlan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/ |\nerror-codes/api-errors.', \u2018type': \u2018insufficient_quota', \u2018param': None, \u2018code': \u2018insufficient_quota'}}\n\nACINFO: Shutting down\n\nINFO: Waiting for application shutdown.\nINFO: Application shutdown complete.\nINFO: Finished server process [92862]\nINFO: Stopping reloader process [92860]\n\n(.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % | |\nQ _Ln10,Col53 Spaces:4 UTF-8 LF {} Python & 3.13.264-bit\n\nx\n\n6 \u20ac8 \u00a9GD O 8S wD F Q S \u00a9 Wed Jul2 10:15AM\n\nArtificial_Intelligence_Ce X  {B) Al-05-BBLEN4 xX \u00a9 OpenAl x @ aptkeys - OpenAl Ai X\n\nIntelligent Excuse Generator Plan >\nBhuvan\n\nThat's it\u2014you now have a zero-cost, Colab-hosted Gemini excuse generator with a public\nendpoint. Ping me if you hit an error or want to add a quick React/Gradio front-end!\n\nAm 6 @\niam so sorry i maen i want to continue with vs code\n\nThought for 4 seconds >\n\nGot it\u2014let's keep everything in VS Code and simply swap the backend from OpenAl to Gemini\nPro (free-tier) inside the project you already started.\n\n1 Stop the old server\n\nIn the VS Code terminal that's running uvicorn ..., hit Ctrl +C.\n\n2 Install the Gemini SDK\n\nbash O) Copy\n\nsource .venv/bin/activate\npip install --upgrade google-generativeai\n\n(leave openai installed for now; you can remove it later if you like)\n\n3 Add your Gemini key\n\nv\n1. Get a free key at https://aistudio.google.coi > API keys > Create.\n\nMessage Bhuvan\n\n+ @\u00ae@ ov\n\nS800eEGE820 \u00a9O8F\u00b010 &*\n\n=]"
}