{
  "timestamp": "2025-07-02_10-26-26",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "import google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"gemini-pro\")\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\n{prompt}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "@ = ChatGPT File Edit View Window Help 6 \u20ac8 \u00a9GD O S 2) F Q S \u00a9 Wed Jul2 10:26AM\n= List of research f @ Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Co ca LAUNCHED Glob M Launched - Artif Artificial_Intelligence | Al-05-BBLEN4 \u00a9 Openal o API keys - Open/ (G) Gemini API refers * Get API key | G X\nO-<\u00abvr ca O 8 \u00ae aistudio.google.com/apikey eee OZ Intelligent Excuse Generator Plan > SC \u2014\n- Bhuvan\n6 \u20ac 5 PP excuse-generator By oO &\n\u00b0 | a EXPLORER x) Welcome  eamaesivay 40 3 Ln Dy @ pip show google-generativeai should now say 0.3.x (or newer). *\nwl \\ EXCUSE-GENERATOR \u00ae excuse_api.py > \u00a9 generate\n\u00a9 {> \u2014Pycache_ 1 # excuse_api.py\nVV venv : . . . a .\nwe import os, json, time, hashlib ie 2 Use the canonical model name\n> include from pathlib import Path a\n> lib\n\n\u00a9 pyvenv.cfg\n .env\n\n@ excuse_api.py\n{} history.json\n\nom\nL&\nES\nA\n\n= requirements.txt\n\n@\n$03 > OUTLINE\n\n> TIMELINE\n\nGE & maine @0A4\n\n4\n\nU\nU\nU\nU\nU\n\n2\n\n3\n\n4 from dotenv import load_dotenv\n\n5 load_dotenv() # \u2014 NEW: pulls OPENAI_API_KEY from .env\n6 from fastapi import FastAPI\n\n7 from pydantic import BaseModel\n\n8\n\n9\n\nimport google.generativeai as genai\n\n1@ genai.configure(api_key=os.getenv(\"GEMINI_KEY\") )\n\n11 model = genai.GenerativeModel(\"gemini-pro\")\n\n12 # ---------- simple \u201cDB\u201d -\u2014---------\n\n13 DATA = Path(\"history. json\")\n\n14 if not DATA.exists():\n\n15 DATA.write_text(\"[]\") # seed empty list\n\n16\n\n17\n\n18\nPROBLEMS @ OUTPUT DEBUG CONSOLE ERIN PORTS. + A oA\nSelearon heen typing-inspection>=0.4.0 in ./.venv/lib/python3.11/site-packages (from ydantic->goog'\u2122 = .\n\nle-generativeai) (@.4.1)\nDownloading google_generativeai-@.8.5-py3-none-any.whl (155 kB) 7\nInstalling collected packages: google-generativeai\nSuccessfully installed google-generativeai-0.8.5\n\n@ (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % pip show google-generativeai\nName: google-generativeai.\nVersion: 0.8.5 \u2018i\nSummary: Google Generative AI High level API client library and tools.\nHome-page: https://github.com/google/generative-ai-python\nAuthor: Google LLC 1\nAuthor-email: googleapis\u2014packages@google. com\nLicense: Apache 2.0\nLocation: /Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages\nRequires: google-ai-generativelanguage, google-api-core, google-api-python-client, google-auth, protobuf, pydantic,\ntqdm, typing-extensions\nRequired-by: '\n(.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % o\n\nLn 39, Col63  Spaces:4 UTF-8 LF\n\nfile.pdf\n\n{} Python a. 3.13.2 64-bit (|\n\nIko to MTJ (1).pdf\n\nITRV (1).pdf ITRV.pdf AIEUTIR EAI EY Iko to MTJ-s-\n\nIko to mtj\n\nS80\u00b0G8880 ese 7a i\n\nWith the new SDK (>= 0.3) simply use:\npython\n\nmodel = genai.GenerativeModel(\"gemini-pro\" )\n\nIf you must stay on the old SDK (not recommended), prepend models/:\n\npython\n\nmodel = genai.GenerativeModel(\"models/gemini-pro\" )\n\nUpdated top-of-file snippet\n\npython\n\nmodel = genai.GenerativeModel(\"gemini-pro\")\n\nv\n\n\u20ac Work with Code Tab x\n\nMessage Bhuvan\n\n+ @\u00ae\n\nen\n\nWw\n\n\u00a9) Copy\n\n\u00a9) Copy\n\n\u00a9) Copy"
}