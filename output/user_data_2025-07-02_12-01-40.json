{
  "timestamp": "2025-07-02_12-01-40",
  "active_window": "ChatGPT",
  "focused_text": "i have reverted the changes that u had me to ad",
  "clipboard": "/Users/bhuvanarora/excuse-generator/excuse_api.py:73: LangChainDeprecationWarning: The method `BaseChatModel.__call__` was deprecated in langchain-core 0.1.7 and will be removed in 1.0. Use :meth:`~invoke` instead.\n  response_text = llm(messages).content.strip()\n/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/langchain_google_genai/chat_models.py:483: UserWarning: Convert_system_message_to_human will be deprecated!\n  warnings.warn(\"Convert_system_message_to_human will be deprecated!\")\nINFO:     127.0.0.1:65462 - \"POST /generate HTTP/1.1\" 500 Internal Server Error\nERROR:    Exception in ASGI application\nTraceback (most recent call last):\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/uvicorn/protocols/http/h11_impl.py\", line 403, in run_asgi\n    result = await app(  # type: ignore[func-returns-value]\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/uvicorn/middleware/proxy_headers.py\", line 60, in __call__\n    return await self.app(scope, receive, send)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/fastapi/applications.py\", line 1054, in __call__\n    await super().__call__(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/applications.py\", line 112, in __call__\n    await self.middleware_stack(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/middleware/errors.py\", line 187, in __call__\n    raise exc\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/middleware/errors.py\", line 165, in __call__\n    await self.app(scope, receive, _send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py\", line 62, in __call__\n    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 53, in wrapped_app\n    raise exc\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 42, in wrapped_app\n    await app(scope, receive, sender)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing.py\", line 714, in __call__\n    await self.middleware_stack(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing.py\", line 734, in app\n    await route.handle(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing.py\", line 288, in handle\n    await self.app(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing.py\", line 76, in app\n    await wrap_app_handling_exceptions(app, request)(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 53, in wrapped_app\n    raise exc\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 42, in wrapped_app\n    await app(scope, receive, sender)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing.py\", line 73, in app\n    response = await f(request)\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/fastapi/routing.py\", line 301, in app\n    raw_response = await run_endpoint_function(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/fastapi/routing.py\", line 214, in run_endpoint_function\n    return await run_in_threadpool(dependant.call, **values)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/concurrency.py\", line 37, in run_in_threadpool\n    return await anyio.to_thread.run_sync(func)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/to_thread.py\", line 56, in run_sync\n    return await get_async_backend().run_sync_in_worker_thread(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 2470, in run_sync_in_worker_thread\n    return await future\n           ^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 967, in run\n    result = context.run(func, *args)\n             ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 77, in generate\n    out = json.loads(response_text)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/.pyenv/versions/3.11.13/lib/python3.11/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/.pyenv/versions/3.11.13/lib/python3.11/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/.pyenv/versions/3.11.13/lib/python3.11/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n# --- Gemini via LangChain (REST v1) ---\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.schema import SystemMessage, HumanMessage\n\n# expose key for LangChain wrapper\nos.environ[\"GOOGLE_API_KEY\"] = os.getenv(\"GOOGLE_API_KEY\")  # must be in .env\n\nllm = ChatGoogleGenerativeAI(\n    model=\"gemini-2.5-flash\",          # free\u2011tier model\n    temperature=0.8,\n    convert_system_message_to_human=True\n)\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n    mode: str = \"normal\"   # \"normal\" | \"apology\"\n\nclass EmergencyRequest(BaseModel):\n    number: str\n    message: str\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    style_clause = (\n        \"Respond in a guilt\u2011tripping, heartfelt apology tone.\"\n        if r.mode.lower() == \"apology\"\n        else \"Respond in a neutral, believable tone.\"\n    )\n    full_prompt = (\n        f\"{SYSTEM_PROMPT}\\nTone: {style_clause}\\n\"\n        f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    )\n    messages = [\n        SystemMessage(content=SYSTEM_PROMPT),\n        HumanMessage(content=full_prompt)\n    ]\n    response_text = llm(messages).content.strip()\n    # LangChain may wrap JSON in ``` blocks \u2013 strip them\n    if response_text.startswith(\"```\"):\n        response_text = response_text.strip(\"`\").lstrip(\"json\").strip()\n    out = json.loads(response_text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]\n\n# ---------- /emergency ----------\n@app.post(\"/emergency\")\ndef emergency(req: EmergencyRequest):\n    \"\"\"\n    Simulate sending an emergency SMS/call.\n    For the demo we just log the request and append an entry to history.json.\n    \"\"\"\n    entry = {\n        \"id\": f\"emergency-{int(time.time())}\",\n        \"ts\": time.time(),\n        \"excuse\": \"EMERGENCY TRIGGER\",\n        \"believability_score\": 1.0,\n        \"chat_log\": f\"Sent '{req.message}' to {req.number}\"\n    }\n    history = json.loads(DATA.read_text())\n    history.append(entry)\n    DATA.write_text(json.dumps(history, indent=2))\n    return {\"status\": \"sent\", \"to\": req.number, \"msg\": req.message}",
  "ocr_text": "@ ChatGPT File Edit View Window Help 6 \u20ac@oOD S xxm F Q S O WedJul2 12:01PM\n\n\u00bb \u2122 B 6 coy (S) 9 Get API key| G X\nw 4\u00bb \u00a9 8 # =\ni >\neee M7 ZG intelligent Excuse Generator Plan\n\"scenario\": \"late for meeting\", \u00a9) Copy\n< excuse-generator \"urgency\": \"medium\",\neT a \"mode\": \"humorous\"\noO EXPLORER 990 @ excuse_api.py5 X  {} history.json @ README.md env U }\n\\ EXCUSE-GENERATOR \u00ae excuse_api.py > \u00a9 generate\n> \u2014pycache_ def generate(r: Req): 0\n veny 9g q and you'll get a funny excuse back.\n> > bin y full_prompt = (\n; a i f\"{SYSTEM_PROMPT}\\nTone: {style_clause}\\n\" Bottom line: currently 2 modes; add as many as you like by extending that dictionary.\npyvenv.cfg 62 f\"Scenario: {r.scenario}\\nUrgency: {r.urgency anog\n.env U j )\n@ excuse_api.py 5 . messages = [\n{} history.json\n@ README.md SystemMessage(content=SYSTEM_PROMPT) , add the suggested modes directly in vs\n= requirements.txt HumanMessage(content=full_prompt )\n\n]\n\nresponse_text = llm(messages).content.strip()\n\nThought for a second\n\nEdits to 1 file Review  \u00a7& Apply\nPROBLEMS e OUTPUT DEBUG CONSOLE TERMINAL PORTS\n\npdates. Couldn't even think about class.\",\"believability_score\":0.96,\"chat_log\":{\"Mom\":\"Hurry! They| . i\nulling up now. This is insane.\"}}2 2) CS TEO IH 5 o\n@ (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/emerg\n-H \"Content-Type: application/json\" 53 @app . post ( \"/generate\" )\n-d '{\"number\":\"+1123456789\" , \"message\" \u2018all me now!\"}' . .\n{\"status\":\"sent\",\"to\":\"+1123456789\",\"msg\":\"Call me now!\" }2 54 def generate(r: Req) a\n@ (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/gener\n\n-H \"Content-Type: application/json\" \\ ~ style_clause = (\n-d '{\"scenario\":\"missed class\",\"urgency\":\"panic\",\"mode\":\"apology\"}' . . . .\n{\"id\" :\"b3d467d71332169893e42b24102ece48\" , \"ts\" :1751437206.329449,\"excuse\":\"Woke up in absolute agony - \"Respond in a guilt-tripping, heartfelt apology tone.\"\nsoning. Spent the entire morning completely incapacitated and glued to the bathroom. There was simp : \u2014\u2014 om T\ne without risking a truly embarrassing public incident.\",\"believability_score\":0.92,\"chat_log\":\"Fri ~ if r.mode. lower ( ) \u2014 apology\nass.\\nMe: OMG, so sorry! Woke up with the worst stomach bug. It was pure hell, literally couldn't 1 ao . . ao\nawful.\\nFriend: Ugh, that sucks! Hope you feel better soon. Don't worry about notes.\\nMe: Thanks. ~ else Respond ina neutral, believable tone.\neciate it!\"}2\n@ (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/gener ~ )\n\n-H \"Content-Type: application/json\" \\\n\nd '{\"scenario' bumped my friends car that i borrowed\",\"urgency\u2019 :\"apology\"}' 55\n{\"id\":\"2d2e2aca2d3e7e9 fb66d8e4d5694613f\", \"ts\": 1751437389. 9344718,\"excus' Hey, so sorry, but someo| 56 _\nt was parked at the grocery store. I left it for maybe 3@ minutes, came back, and saw the bump on t| tone_map _ {\nout it, I swear I didn't feel anything while driving.\",\"believability_score\":0.88,\"chat_log\":\"Me: | . . .\nyour car...\\nFriend: Oh no, what?!\\nMe: Looks like someone backed into it or something while it wa 57 \"normal\": \"Respond ina neutral, believable tone. .,\nhe rear when I came out. I'm so sorry, dude.\\nFriend: Ugh, seriously?! People are the worst. Is it . . . \u00b0 .\nly noticeable. I'm gutted for you. Couldn't believe it.\"}f aie \"apology\": \"Respond in a guilt-tripping, heartfelt apology tone.\",\n@ (.venv) bhuvanarora@Bhuvans-MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/gener 59 \"humorous\": \"Respond ina lighthearte\u00a2c ay witty style. \" '\n-H \"Content-Type: application/json\" \\ | non 60 Unrnfaceinnal\": \"lea fanrmal hie+tnece 1. .qiana and kaan wt eonnerica 4\n\n-d '{\"scenario\":\"deadline\",\"urgency\":\"medium\",\"mode\":\"humorous\"}'\nInternal Server Errorg\n@ (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % curl -X POST http://127.0.0.1:8000/gener\n\n-H \"Content-Type: application/json\" \u00a9 excuse_api.py x\n\n> OUTLINE -d '{\"scenario\":\"deadline\",\"urgency\":\"medium\",\"mode\":\"humorous\"}'\nInternal Server Errorg\n> TIMELINE (.venv) bhuvanarora@Bhuvans-MacBook-Pro excuse-generator % [] i have reverted the changes that u had me to add\n main* 2 @0A5 Not Committed Yet Qo Ln 62, Col 11\n\nil IKI! @...LUOW].MIpo GOCUTTIEILs .pal 1i- 1.01 234.3 MB\n\u00a9 ecu . \u00b0 +@\u00ae& Q \u00b0\n\n~~ 9880\u00b068880 O9008 B\u00ae\n\nB= \u2014 1 = | EB _\u2014 | Pass |\n7"
}