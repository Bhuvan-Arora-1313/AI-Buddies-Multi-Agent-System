{
    "timestamp": "2025-07-01_17-33-33",
    "active_window": "ChatGPT",
    "focused_text": "Could not extract AXValue from focused element",
    "clipboard": "import datetime\nimport pytesseract\nfrom PIL import ImageGrab\nimport subprocess\nimport json\nimport time\nimport pyperclip\nimport platform\n\n# On Windows, import win32gui for window title\ntry:\n    import win32gui\n    import win32con\nexcept ImportError:\n    win32gui = None\n    win32con = None\n\ndef is_windows():\n    return platform.system() == \"Windows\"\n\n# Get active window title (cross-platform)\ndef get_active_window_title():\n    if is_windows():\n        try:\n            hwnd = win32gui.GetForegroundWindow()\n            return win32gui.GetWindowText(hwnd)\n        except Exception as e:\n            return f\"Error (Win): {e}\"\n    else:\n        try:\n            script = 'tell application \"System Events\" to get name of (processes where frontmost is true)'\n            output = subprocess.check_output(['osascript', '-e', script]).decode().strip()\n            return output\n        except Exception as e:\n            return f\"Error (Mac): {e}\"\n\n# Improved function: get_focused_text() returns the AXValue string or error message, not printing anything\ndef get_focused_text():\n    if is_windows():\n        # Just return clipboard text on Windows\n        try:\n            return pyperclip.paste()\n        except Exception as e:\n            return f\"Clipboard error (Win): {e}\"\n    else:\n        try:\n            script = '''\n            tell application \"System Events\"\n                set frontApp to name of first application process whose frontmost is true\n                if frontApp is \"Visual Studio Code\" then\n                    keystroke \"a\" using command down\n                    delay 0.2\n                    keystroke \"c\" using command down\n                    delay 0.2\n                    return \"CLIPBOARD\"\n                else\n                    tell application process frontApp\n                        try\n                            set focusedElement to value of attribute \"AXFocusedUIElement\"\n                            set focusedValue to value of attribute \"AXValue\" of focusedElement\n                            return focusedValue\n                        on error\n                            return \"Could not extract AXValue from focused element\"\n                        end try\n                    end tell\n                end if\n            end tell\n            '''\n            result = subprocess.run(['osascript', '-e', script], capture_output=True, text=True)\n            output = result.stdout.strip()\n            if output == \"CLIPBOARD\":\n                time.sleep(0.3)\n                clipboard_content = pyperclip.paste()\n                return clipboard_content\n            elif output == \"\":\n                return \"Could not extract AXValue from focused element\"\n            else:\n                return output\n        except Exception as e:\n            return f\"Error (Mac): {e}\"\n\n# Take screenshot\ndef capture_screenshot(filename):\n    img = ImageGrab.grab()\n    img.save(f\"output/{filename}\")\n    return img\n\n# Run OCR on image\ndef run_ocr(image):\n    text = pytesseract.image_to_string(image)\n    return text.strip()\n\n## Main capture logic (unchanged)\n\nif __name__ == \"__main__\":\n    import json\n    import time\n    import pyperclip\n    try:\n        while True:\n            timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n            screenshot_path = f\"screenshot_{timestamp}.png\"\n            active_window = get_active_window_title()\n            # Use get_focused_text() for textbox_text\n            textbox_text = get_focused_text()\n            # Clipboard logic: On Windows, clipboard and focused_text are the same; on Mac, they may differ\n            if is_windows():\n                clipboard_content = textbox_text\n            else:\n                clipboard_content = pyperclip.paste()\n            image = capture_screenshot(screenshot_path)\n            ocr_text = run_ocr(image)\n            import os\n            # Read the VS Code live text file (cross-platform)\n            vscode_text = \"\"\n            if platform.system() == \"Darwin\":\n                path = os.path.expanduser(\"~/Desktop/vscode_live_text.txt\")\n            elif platform.system() == \"Windows\":\n                path = os.path.expanduser(\"~/Desktop/vscode_live_text.txt\")\n            else:\n                path = \"/tmp/vscode_live_text.txt\"\n\n            try:\n                with open(path, \"r\", encoding=\"utf-8\") as f:\n                    vscode_text = f.read().strip()\n            except FileNotFoundError:\n                vscode_text = \"VS Code text not found.\"\n\n            data = {\n                \"timestamp\": timestamp,\n                \"active_window\": active_window,\n                \"focused_text\": textbox_text,\n                \"clipboard\": clipboard_content,\n                \"vscode_text\": vscode_text,\n                \"ocr_text\": ocr_text\n            }\n            with open(f\"output/user_data_{timestamp}.json\", \"w\") as f:\n                json.dump(data, f, indent=2)\n            with open(\"output/live_output.json\", \"w\") as f:\n                json.dump(data, f, indent=4)\n            time.sleep(20)\n    except KeyboardInterrupt:\n        print(\"Program interrupted by user.\")",
    "vscode_text": "<!DOCTYPE html>\n<html>\n  <body style=\"margin: 0; background: rgba(0,0,0,0.7); color: white; font-family: sans-serif;\">\n    <div style=\"-webkit-app-region: drag; padding: 10px; background: rgba(0,0,0,0.8);\">\n      <pre id=\"output\" style=\"white-space: pre-wrap; word-wrap: break-word;\">Waiting for data...</pre>\n    </div>\n    <script>\n      const { ipcRenderer } = require('electron');\n      ipcRenderer.on('update-prediction', (event, data) => {\n        document.getElementById('output').textContent = data;\n      });\n    </script>\n  </body>\n</html>",
    "ocr_text": "@  ChatcpT\n\nFile\n\nvilla,\n\noles are\n\n,\n\n~ 7\n- 10 2\u00b0\n-9 3-\ne 4.\n-, 7 5S\n4 ~~\ntoouns\nJULY\n\nMTWTF S S\n\n@:\na)\n14 15 16\n21 22 23\n\n28 29 30\n\n3\n10\n17\n24\n31\n\n4 5 6\n11 12 13\n18 19 20\n25 26 27\n\nEdit\n\nView Window Help\n\nPyCharm\n2024.3.5\n\nProjects\nCustomize\nPlugins\n\nLearn\n\nQ Search projects\n\nNew Script\n\nNew Project\n\nOpen\n\ndeleted:\n@ deleted:\ndeleted:\ndeleted:\ndeleted:\n\nPC deleted:\n\nUntracked files:\n(use \"git add <file>...\" to include in what will be committed)\n\nPP. -idea/\n\n-venv/\n\n@ Buddy \u2014 -zsh \u2014 80x24\n\noutput/user_data_2025-06-27_20-59-57\noutput/user_data_2025-06-27_21-00-20\noutput/user_data_2025-06-27_21-0@0-42\noutput/user_data_2025-06-27_21-01-05\noutput/user_data_2025-0@6-27_21-05-36\noutput/user_data_2025-06-27_21-06-00\n\noutput/prediction_output.json\noutput/screenshot_2025-07-@1_17-28-01.png\noutput/screenshot_2025-07-01_17-32-23.png\noutput/screenshot_2025-07-01_17-32-46.png\noutput/user_data_2025-07-01_17-27-36.json\noutput/user_data_2025-07-01_17-28-01.json\noutput/user_data_2025-07-@1_17-32-23.json\noutput/user_data_2025-07-01_17-32-46.json\noutput_popup.py\n\n\u00abjson\n\u00abjson\n\u00abjson\n\u00abjson\n\u00abjson\n\u00abjson\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n[bhuvanarora@Bhuvans\u2014MacBook-Pro Buddy % git add output_popup.py\n\nbhuvanarora@Bhuvans-MacBook-Pro Buddy % git add -O\n\nTake a quick onboarding tour\n\nClone Repository\n\nx\n\nNew to PyCharm? Get the most out of your IDE. Become acquainted with its tools and basic workflows.\n\nStart Tour\n\nS80\u00b0e8GE20 \u00a90900\n\n6 \u20ac8 OGD O 8S 4H F Q SB @ Tue Jult 5:33PM\nll a\u00bb Sm \u2014\n\nPopup JSON Viewer > \u00bb\ne e e @ GZ Bhuvan \u2014_ CS\nSettee eee tee ne ge cee eee cee ro\nM\n\u00a9 Stage your changes:\nbash \u00a9) Copy\nM git add output_popup.py\n\ngit add.\n\nVY Commit the changes:\nbash \u00a9) Copy\n\n_popup.py and update gatheruserdata to delete screenshot\n\n@ Push to GitHub:\nbash O) Copy\n\ngit push\n\nSB That's it!\ng\n\nYour GitHub reno ic now tn to date with:\n\nin\n\n(\u00a9) PyCharm (inactive) x\nMessage Bhuvan\n\n+ @\u00ae &\n\n=]"
}