{
  "timestamp": "2025-07-02_10-09-31",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "Code File Edit Selection View Go Run Terminal Window\u2019 Help 3 2%8) F Q S Wed Jul 2 10:09AM\n+\n= List of research pape X * Artificial Intelligence X CO NLP_1.ipynb - Colab X CO NLP_1.ipynb - Colab X ca LAUNCHED Global X M Launched - Artificial X Artificial_Intelligence_Ce X (Bi al-05-BBLEN4 x \u00a9 Opendl x So API keys - OpenAl A! X\nO <7 Ce O @G = platform.openai.com/settings/organization/api-keys Intelligent Excuse Generator Plan > y=\nBhuvan\nS C eee \u201c> & excuse-generator B- 0 (The critical bit is that load_dotenv() must execute before client = OpenAl(...).) q\n@\no | EXPLORER J Welcome \u00ae excuse_api.py 4,U X %.env U aan\nwl Vv EXCUSE-GENERATOR \u00ae excuse_api.py > ... 2 Save & restart cleanly\n\u00a9 {> \u2014Pycache_ 1 # excuse_api.py |\nv venv \" q q .\n\u2014 2 import os, json, time, hashlib | bash \u00a9) Copy\nes > include 3 from pathlib import Path 7\nS| 2! 4 from dotenv import load_dotenv\nbs  pyvenv.cfg U CIID Ctrl-C\noO ew t 5 load_dotenv() # < NEW: pulls OPENAT_API_KEY from .env\nES @ excuse _apipy 4,U 6 from fastapi import FastAPI\na store Een U 7 from pydantic impo rt BaseModel unset OPENAI_API_KEY\nA = requirements.txt U enn\n8 from openai import OpenAI\n9 # \u2014---------- OpenAI client ---------- uvicorn excuse_api:app \u2014-reload\n10 client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\") )\n11 3 Test once more\nW200 GP s==Sseeees simple \u201cDB\u201d ---------\u2014 = ac\na a as! fo)\n13 DATA = Path(\"history.json\") i\n14 if not DATA.exists(): . curl -X POST http://127.0.0.1:8000/generate \\\n15 DATA.write_text(\"[]\") # seed empty list -H \"Content-Type: application/json\" \\\n16 -d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}'\n17 . ;\n18 You should finally get a JSON payload like:\nI @e =====eeoS= FastAPI app \u2014--------- json & Copy\n28 app = FastAPI()\n71 {\nPROBLEMS @ OUTPUT DEBUGCONSOLE TERMINAL PORTS +y A x \"id\": \"9ce7..\",\nreturn self._post( a (>) pyth... Ww \"ts\": 1751556451. 1,\nFile w /Users/bhuvanarore/e cuse-generator/.venv/lib/python3.11/site-packages/openai/_base_client.py\", line 1249, i 2) zsh Teas \u00a9 (Sue pails Any Wicese line was shut due to a gas Werks drill..\",\nn post m\u2122 MEE TEA ATE EYES PI ESA TE EY ILA UE aa \"believability_score\": @.81,\nreturn cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)) \"chat_log\": \"Mum: Any update? ...\"\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/openai/_base_client.py\", line 1037, is }\nn request\n(2) aise self._make_status_error_from_response(err.response) from None ab\nopenai.RateLimitError: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your pla \u00b0 ;\n> OUTLINE lan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/ 4 Commit & push (once it works)\n$03 Sacine error-codes/api-errors.', \u2018type': \u2018insufficient_quota', \u2018param': None, \u2018code': \u2018insufficient_quota'}}\nGE & maine @0A4 Q_Ln10,Col53 Spaces:4 UTF-8 LF {} Python & 3.13.264-bit Q let mem tell u that the order u told me was already there before so i am again agetting the\nsame erro internal se3rver error\n+ @& :@\n3\n\n920068820 8920 AF"
}