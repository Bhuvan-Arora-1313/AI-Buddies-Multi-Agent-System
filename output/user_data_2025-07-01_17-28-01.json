{
  "timestamp": "2025-07-01_17-28-01",
  "active_window": "Finder",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "import datetime\nimport pytesseract\nfrom PIL import ImageGrab\nimport subprocess\nimport json\nimport time\nimport pyperclip\nimport platform\n\n# On Windows, import win32gui for window title\ntry:\n    import win32gui\n    import win32con\nexcept ImportError:\n    win32gui = None\n    win32con = None\n\ndef is_windows():\n    return platform.system() == \"Windows\"\n\n# Get active window title (cross-platform)\ndef get_active_window_title():\n    if is_windows():\n        try:\n            hwnd = win32gui.GetForegroundWindow()\n            return win32gui.GetWindowText(hwnd)\n        except Exception as e:\n            return f\"Error (Win): {e}\"\n    else:\n        try:\n            script = 'tell application \"System Events\" to get name of (processes where frontmost is true)'\n            output = subprocess.check_output(['osascript', '-e', script]).decode().strip()\n            return output\n        except Exception as e:\n            return f\"Error (Mac): {e}\"\n\n# Improved function: get_focused_text() returns the AXValue string or error message, not printing anything\ndef get_focused_text():\n    if is_windows():\n        # Just return clipboard text on Windows\n        try:\n            return pyperclip.paste()\n        except Exception as e:\n            return f\"Clipboard error (Win): {e}\"\n    else:\n        try:\n            script = '''\n            tell application \"System Events\"\n                set frontApp to name of first application process whose frontmost is true\n                if frontApp is \"Visual Studio Code\" then\n                    keystroke \"a\" using command down\n                    delay 0.2\n                    keystroke \"c\" using command down\n                    delay 0.2\n                    return \"CLIPBOARD\"\n                else\n                    tell application process frontApp\n                        try\n                            set focusedElement to value of attribute \"AXFocusedUIElement\"\n                            set focusedValue to value of attribute \"AXValue\" of focusedElement\n                            return focusedValue\n                        on error\n                            return \"Could not extract AXValue from focused element\"\n                        end try\n                    end tell\n                end if\n            end tell\n            '''\n            result = subprocess.run(['osascript', '-e', script], capture_output=True, text=True)\n            output = result.stdout.strip()\n            if output == \"CLIPBOARD\":\n                time.sleep(0.3)\n                clipboard_content = pyperclip.paste()\n                return clipboard_content\n            elif output == \"\":\n                return \"Could not extract AXValue from focused element\"\n            else:\n                return output\n        except Exception as e:\n            return f\"Error (Mac): {e}\"\n\n# Take screenshot\ndef capture_screenshot(filename):\n    img = ImageGrab.grab()\n    img.save(f\"output/{filename}\")\n    return img\n\n# Run OCR on image\ndef run_ocr(image):\n    text = pytesseract.image_to_string(image)\n    return text.strip()\n\n## Main capture logic (unchanged)\n\nif __name__ == \"__main__\":\n    import json\n    import time\n    import pyperclip\n    try:\n        while True:\n            timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n            screenshot_path = f\"screenshot_{timestamp}.png\"\n            active_window = get_active_window_title()\n            # Use get_focused_text() for textbox_text\n            textbox_text = get_focused_text()\n            # Clipboard logic: On Windows, clipboard and focused_text are the same; on Mac, they may differ\n            if is_windows():\n                clipboard_content = textbox_text\n            else:\n                clipboard_content = pyperclip.paste()\n            image = capture_screenshot(screenshot_path)\n            ocr_text = run_ocr(image)\n            import os\n            # Read the VS Code live text file (cross-platform)\n            vscode_text = \"\"\n            if platform.system() == \"Darwin\":\n                path = os.path.expanduser(\"~/Desktop/vscode_live_text.txt\")\n            elif platform.system() == \"Windows\":\n                path = os.path.expanduser(\"~/Desktop/vscode_live_text.txt\")\n            else:\n                path = \"/tmp/vscode_live_text.txt\"\n\n            try:\n                with open(path, \"r\", encoding=\"utf-8\") as f:\n                    vscode_text = f.read().strip()\n            except FileNotFoundError:\n                vscode_text = \"VS Code text not found.\"\n\n            data = {\n                \"timestamp\": timestamp,\n                \"active_window\": active_window,\n                \"focused_text\": textbox_text,\n                \"clipboard\": clipboard_content,\n                \"vscode_text\": vscode_text,\n                \"ocr_text\": ocr_text\n            }\n            with open(f\"output/user_data_{timestamp}.json\", \"w\") as f:\n                json.dump(data, f, indent=2)\n            with open(\"output/live_output.json\", \"w\") as f:\n                json.dump(data, f, indent=4)\n            time.sleep(20)\n    except KeyboardInterrupt:\n        print(\"Program interrupted by user.\")",
  "vscode_text": "<!DOCTYPE html>\n<html>\n  <body style=\"margin: 0; background: rgba(0,0,0,0.7); color: white; font-family: sans-serif;\">\n    <div style=\"-webkit-app-region: drag; padding: 10px; background: rgba(0,0,0,0.8);\">\n      <pre id=\"output\" style=\"white-space: pre-wrap; word-wrap: break-word;\">Waiting for data...</pre>\n    </div>\n    <script>\n      const { ipcRenderer } = require('electron');\n      ipcRenderer.on('update-prediction', (event, data) => {\n        document.getElementById('output').textContent = data;\n      });\n    </script>\n  </body>\n</html>",
  "ocr_text": "@ Finder File Edit View Go Window\u2019 Help 6 8 oGd Oo Ss 4G F Q SBS @ Tue Juli 5:28PM\n\nPO bm ~\n\nAY 2 \u2018\nS 11 1 2 Popup JSON Viewer >\n10 2 Bhuvan\nS 9 3 =\n-8 4. : I\n, (B) Buddy ~ 9 main v CurrentFilev [> x : 42 QA se\nO Pr eee < output Ba \u00a2 mY OY QO Oy Q sy Ya a\nJULY Back/Forward View Group Share Edit Tags Action Search M2 A1\u00a5v7A Vv\nMTtTw|-o \u00bb/ ~ = \u00a9 |e The warning you're seeing \u2014\n; 4 4 35 \u00a9 AirDrop = = & ened [Warning] Failed to delete screenshot: name 'os' is\n14 15 16 \u00a9 Recents : . ; moe Ciaiieal =\nal ae Bel A Applicatio. prediction_output live_output.json screenshot_2025 screenshot_2025 screenshot_2025 screenshot_2025 H means the os module wasn't imported in the same file where you're\n2) ck) do \u201c APP - json -06-27...0-13.png -06-27...-36.png -06-27_..-59.png -06-27_...1-22.png deleting the screenshot.\n{\u00a7 Documents '\n!\n\u00a9 Images\n\u00a9 Downloads Sa eee ee eae eee ~ Add this line at the top of your gatheruserdata.py file (or wherever\n| ou're doing os. remove(...)):\npython \u00a9) Copy\nRun \\\nle import os\nE% Shared Lonvert_syste\n> io = [] [| [| |] Even though os is already imported in other places (like\n\\ activity_analyzer.py), each Python file (module) needs to\n@ \u2014 \u00a9 Bhuvan's... . P P\n& | x 8 Dia j\n\u00a9 = \u00ae Wonde... [| Mei = codon Once you add that, the screenshot deletion will work correctly. Want\nwu \u2014 seract, PIL, s me to auto-insert that now?\n@) @ Red \u00a2\n29 @ Orange | (\u00a9) activity_analyzer.py x (=) Buddy - activity_analyzer.py \u2014 Editor 2 x\n\u2018\n@ Green _\n@))\n\nS@0%\u00b0eSE20 \u00a90900 i"
}