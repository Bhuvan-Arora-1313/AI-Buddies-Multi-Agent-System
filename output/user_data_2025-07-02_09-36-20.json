{
  "timestamp": "2025-07-02_09-36-20",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "nano excuse_api.py  ",
  "vscode_text": "<!DOCTYPE html>\n<html>\n  <body style=\"margin: 0; background: rgba(0,0,0,0.7); color: white; font-family: sans-serif;\">\n    <div style=\"-webkit-app-region: drag; padding: 10px; background: rgba(0,0,0,0.8);\">\n      <pre id=\"output\" style=\"white-space: pre-wrap; word-wrap: break-word;\">Waiting for data...</pre>\n    </div>\n    <script>\n      const { ipcRenderer } = require('electron');\n      ipcRenderer.on('update-prediction', (event, data) => {\n        document.getElementById('output').textContent = data;\n      });\n    </script>\n  </body>\n</html>",
  "ocr_text": "@ ChatGPT File Edit View Window Help\n= ae x  \u20ac0 x  \u20ac0 x\nO<\u00ab > CGC @ O _D ffile:///Users/bhuvanarora/Downloads/Artificial_Intelligence_Capstone_Project.pdf.pdf\n\u00a9 &D Vv 1 of 2 \u2014 + AutomaticZoom v\n2\n\u00a9 \u00a2 Enable users to generate proof-backed excuses for various\nnd emergency alert syste\nUW PICO 5.09 File: excuse_api.py Modified =\no .\n|, believable, and adaptabl\nxt-based excuse suggestiq\n\u2014 Allows users to refine 4\n: documents, chat screens\n[ line 1 of 2 (50%), character @ of 1 (0%) ]\nGet Help WriteOut ; Read File i Prev Pg ; Cut Text Cur Pos\nWy Exit We) Justify Wi] Where is [MY Next Pg We) UnCut Texti\u00a5y To Spell\n4. Emergency Call & Text System \u2014 Auto-triggers fake eme\n5. Al Guilt-Tripping Apology Generator \u2014 Auto-creates prof\n6. Voice & Text Integration \u2014 Generates excuses in both wri\nrealism.\n7. Excuse History & Favorites \u2014 Users can save frequently\nEnzyme office space. +91 80621 81856\nBackside of star ba: support@launched.org.in\nHSR Layout, Benga\nKarnataka 560)\n3\n\n37% @ FP Q\n\n\u00a9 fF CO08\n\nx MM x Artificial_Intelligence_Capstone_ X a\n\nIntelligent Excuse Generator Plan >\nBhuvan\n\neee MO GG\n\n@app.post(\"/generate\")\ndef generate(r: Req):\nprompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n\nres = client.chat.completions.create(\nmodel=\"gpt\u201440-mini\",\nmessages=[\n{\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n{\"role\": \"user\", \"content\": prompt},\nI,\ntemperature=0.8,\n)\nout = json.loads(res.choices[0].message.content)\nentry = {\n\"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n\"ts\": time.time(),\n*kOUt,\n}\nhistory = json.loads(DATA.read_text())\n\nif entry[\"id\"] not in {h[\"id\"] for h in history}:\nhistory.append(entry)\nDATA.write_text(json.dumps(history, indent=2) )\nreturn entry\n@app.get(\"/top\")\ndef top(n: int = 5):\nhistory = json.loads(DATA.read_text())\n\nhistory.sort(key=lambda x: x[\"believability_score\"],\nreturn historyL:n]\n\n2. Save & exit in nano\n\n(@ Work with Terminal Tab x\nMessage Bhuvan\n\n+ \u00ae@ w\n\nS@0O\u00bbaSero Oe &*\n\nx\n\n\u00a9 Copy\n\nreverse=True)\n\n=]"
}