{
  "timestamp": "2025-07-15_11-27-20",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "git remote -v",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n# --- Gemini via LangChain (REST v1) ---\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.schema import SystemMessage, HumanMessage\n\n# expose key for LangChain wrapper\nos.environ[\"GOOGLE_API_KEY\"] = os.getenv(\"GOOGLE_API_KEY\")  # must be in .env\n\nllm = ChatGoogleGenerativeAI(\n    model=\"gemini-2.5-flash\",          # free\u2011tier model\n    temperature=0.8,\n    convert_system_message_to_human=True\n)\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n    mode: str = \"normal\"   # \"normal\" | \"apology\"\n    language: str = \"en\"   # ISO code, e.g. \"en\", \"es\", \"fr\"\n    voice: bool = False   # If true, return an MP3 of the excuse\n\nclass EmergencyRequest(BaseModel):\n    number: str\n    message: str\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    style_clause = (\n        \"Respond in a guilt\u2011tripping, heartfelt apology tone.\"\n        if r.mode.lower() == \"apology\"\n        else \"Respond in a neutral, believable tone.\"\n    )\n    # language directive\n    lang_clause = (\n        \"\" if r.language.lower() in [\"en\", \"english\"] else\n        f\"Respond in {r.language} language.\"\n    )\n    full_prompt = (\n        f\"{SYSTEM_PROMPT}\\n\"\n        f\"Tone: {style_clause}\\n\"\n        f\"{lang_clause}\\n\"\n        f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    )\n    messages = [\n        SystemMessage(content=SYSTEM_PROMPT),\n        HumanMessage(content=full_prompt)\n    ]\n    response_text = llm(messages).content.strip()\n    # LangChain may wrap JSON in ``` blocks \u2013 strip them\n    if response_text.startswith(\"```\"):\n        response_text = response_text.strip(\"`\").lstrip(\"json\").strip()\n    out = json.loads(response_text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n    # --- optional voice synthesis ---\n    if r.voice:\n        from gtts import gTTS\n        audio_dir = Path(\"audio\")\n        audio_dir.mkdir(exist_ok=True)\n        audio_file = audio_dir / f\"{entry['id']}.mp3\"\n        gTTS(out[\"excuse\"], lang=r.language[:2]).save(audio_file.as_posix())\n        entry[\"audio\"] = str(audio_file)\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]\n\n# ---------- /emergency ----------\n@app.post(\"/emergency\")\ndef emergency(req: EmergencyRequest):\n    \"\"\"\n    Simulate sending an emergency SMS/call.\n    For the demo we just log the request and append an entry to history.json.\n    \"\"\"\n    entry = {\n        \"id\": f\"emergency-{int(time.time())}\",\n        \"ts\": time.time(),\n        \"excuse\": \"EMERGENCY TRIGGER\",\n        \"believability_score\": 1.0,\n        \"chat_log\": f\"Sent '{req.message}' to {req.number}\"\n    }\n    history = json.loads(DATA.read_text())\n    history.append(entry)\n    DATA.write_text(json.dumps(history, indent=2))\n    return {\"status\": \"sent\", \"to\": req.number, \"msg\": req.message}",
  "ocr_text": "O Buddy > @ activity_analyzer_grog.py\n\n@ = PyCharm File Edit View Navigate Code Refactor Run Tools Git Window Help @6ogqgo S \u00a9) 3s%x@) F Q SBS SO Tue Jul 15 11:27AM\n( ; = = | Rs\nmain v Cu 8\n@ Maccy\nBuddy Bubble it remote -v\nY @ activity_analyzer.py \u00ae activity_analyzer_grog.py <x @ floating_bubble_ui_grog.py @ shared_state.py @\u00ae floating_bubble_ui.py @ buddy_magic., a A\n| Resume | BrOq.py import json 2 044\u00a544 v @\nssistant.py import time\n94, @ swe_buddy.py import os J\n@ swe_buddy_groq.py from typing import Dict, Any, List\n@ Y Doutput import subprocess\noo .\n{} live_output.json from grog import Groq\neee } prediction_output.json from dotenv import load_dotenv\n& screenshot_2025-07-14_19-00-40.png from shared_state import set_paused, is_paused\n- - ; \u2018Load_dotenv\n& screenshot_2025-07-14_19-28-53.png - 0\n$} screenshot_2025-07-15_08-48-31.pn\n8 ~ ~ png Client = Groq(api_key=os.getenv(\"GROQ_API_KEY\"))\n& screenshot_2025-07-15_09-48-35.png\n6) screenshot_2025-07-15_10-02-42.png LIVE_PATH = \u201coutput/live_output.json\"\n&) screenshot_2025-07-15_10-07-54.png PREDICT_PATH = \"output/prediction_output. json\"\n(3 user_data_2025-07-15_11-21-49.json\n(} user_data_2025-07-15_11-22-13.json def read_latest_user_data() -> Dict[str, Any]: \u2018usage\n{3 user_data_2025-07-15_11-22-37.json try:\n{} user_data_2025-07-15_11-23-00.json with open(LIVE_PATH, \"r\", encoding=\"utf-8\") as f:\n{} user_data_2025-07-15_11-23-25.json return json. load(f)\n(3 user_data_2025-07-15_11-23-50.json nee\nreturn\n(3 user_data_2025-07-15_11-24-15.json tt\n{3 user_data_2025-07-15_11-24-40.json . .\ndef get_all_user_data_files() -> List[str]: \u2018usage\n(3 user_data_2025-07-15_11-25-02.json ae\n{} user_data_2025-07-15_11-25-27,json return sorted([f for f in os.listdir(\"output\") if f.startswith(\"user_data_\")]) \u2014\n(} user_data_2025-07-15_11-25-50.json except:\n(3 user_data_2025-07-15_11-26-13.json return []\n| Run \u00a9 floating_bubble_ui_groq x \u00a9 activity_analyzer_grogq = =\nCg\ngS \"data_sources\": \"Active Window, Focused Text, Screen OCR\",\n\"timestamp\": 1752558689 .797154\nDeleted: output/user_data_2025-07-15_11-21-26.json\nes) Deleted: output/user_data_2025-07-15_11-21-10.json\n\u00a9 Deleted: output/user_data_2025-07-15_10-20-03.json\nDeleted: output/user_data_2025-07-15_10-18-27.json\n99 Deleted: output/user_data_2025-07-15_10-19-16. json]\nDeleted: outout/user data 2025-07-15 10-19-39.ison\n\n151:41 LF UTF-8 4spaces Python 3.13 (Buddy) Gf\n\nS80\u00b08GE20 GBG00800\u00b0\"3'' a8 .=..9\u2122\n\na... mr mh"
}