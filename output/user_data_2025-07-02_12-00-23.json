{
  "timestamp": "2025-07-02_12-00-23",
  "active_window": "ChatGPT",
  "focused_text": "internal server er",
  "clipboard": "/Users/bhuvanarora/excuse-generator/excuse_api.py:73: LangChainDeprecationWarning: The method `BaseChatModel.__call__` was deprecated in langchain-core 0.1.7 and will be removed in 1.0. Use :meth:`~invoke` instead.\n  response_text = llm(messages).content.strip()\n/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/langchain_google_genai/chat_models.py:483: UserWarning: Convert_system_message_to_human will be deprecated!\n  warnings.warn(\"Convert_system_message_to_human will be deprecated!\")\nINFO:     127.0.0.1:65462 - \"POST /generate HTTP/1.1\" 500 Internal Server Error\nERROR:    Exception in ASGI application\nTraceback (most recent call last):\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/uvicorn/protocols/http/h11_impl.py\", line 403, in run_asgi\n    result = await app(  # type: ignore[func-returns-value]\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/uvicorn/middleware/proxy_headers.py\", line 60, in __call__\n    return await self.app(scope, receive, send)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/fastapi/applications.py\", line 1054, in __call__\n    await super().__call__(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/applications.py\", line 112, in __call__\n    await self.middleware_stack(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/middleware/errors.py\", line 187, in __call__\n    raise exc\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/middleware/errors.py\", line 165, in __call__\n    await self.app(scope, receive, _send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py\", line 62, in __call__\n    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 53, in wrapped_app\n    raise exc\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 42, in wrapped_app\n    await app(scope, receive, sender)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing.py\", line 714, in __call__\n    await self.middleware_stack(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing.py\", line 734, in app\n    await route.handle(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing.py\", line 288, in handle\n    await self.app(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing.py\", line 76, in app\n    await wrap_app_handling_exceptions(app, request)(scope, receive, send)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 53, in wrapped_app\n    raise exc\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/_exception_handler.py\", line 42, in wrapped_app\n    await app(scope, receive, sender)\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing.py\", line 73, in app\n    response = await f(request)\n               ^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/fastapi/routing.py\", line 301, in app\n    raw_response = await run_endpoint_function(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/fastapi/routing.py\", line 214, in run_endpoint_function\n    return await run_in_threadpool(dependant.call, **values)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/concurrency.py\", line 37, in run_in_threadpool\n    return await anyio.to_thread.run_sync(func)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/to_thread.py\", line 56, in run_sync\n    return await get_async_backend().run_sync_in_worker_thread(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 2470, in run_sync_in_worker_thread\n    return await future\n           ^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 967, in run\n    result = context.run(func, *args)\n             ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 77, in generate\n    out = json.loads(response_text)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/.pyenv/versions/3.11.13/lib/python3.11/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/.pyenv/versions/3.11.13/lib/python3.11/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/bhuvanarora/.pyenv/versions/3.11.13/lib/python3.11/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n# --- Gemini via LangChain (REST v1) ---\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.schema import SystemMessage, HumanMessage\n\n# expose key for LangChain wrapper\nos.environ[\"GOOGLE_API_KEY\"] = os.getenv(\"GOOGLE_API_KEY\")  # must be in .env\n\nllm = ChatGoogleGenerativeAI(\n    model=\"gemini-2.5-flash\",          # free\u2011tier model\n    temperature=0.8,\n    convert_system_message_to_human=True\n)\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n    mode: str = \"normal\"   # \"normal\" | \"apology\"\n\nclass EmergencyRequest(BaseModel):\n    number: str\n    message: str\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    # Tone selection based on mode\n    tone_map = {\n        \"normal\": \"Respond in a neutral, believable tone.\",\n        \"apology\": \"Respond in a guilt-tripping, heartfelt apology tone.\",\n        \"humorous\": \"Respond in a lighthearted, witty style.\",\n        \"professional\": \"Use formal business language and keep it concise.\",\n        \"sarcastic\": \"Answer with brief, dry sarcasm.\",\n        \"emergency\": \"Sound panicked and extremely urgent; maximum 20 words.\"\n    }\n    style_clause = tone_map.get(r.mode.lower(), tone_map[\"normal\"])\n    full_prompt = (\n        f\"{SYSTEM_PROMPT}\\nTone: {style_clause}\\n\"\n        f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    )\n    messages = [\n        SystemMessage(content=SYSTEM_PROMPT),\n        HumanMessage(content=full_prompt)\n    ]\n    response_text = llm(messages).content.strip()\n    # LangChain may wrap JSON in ``` blocks \u2013 strip them\n    if response_text.startswith(\"```\"):\n        response_text = response_text.strip(\"`\").lstrip(\"json\").strip()\n    out = json.loads(response_text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]\n\n# ---------- /emergency ----------\n@app.post(\"/emergency\")\ndef emergency(req: EmergencyRequest):\n    \"\"\"\n    Simulate sending an emergency SMS/call.\n    For the demo we just log the request and append an entry to history.json.\n    \"\"\"\n    entry = {\n        \"id\": f\"emergency-{int(time.time())}\",\n        \"ts\": time.time(),\n        \"excuse\": \"EMERGENCY TRIGGER\",\n        \"believability_score\": 1.0,\n        \"chat_log\": f\"Sent '{req.message}' to {req.number}\"\n    }\n    history = json.loads(DATA.read_text())\n    history.append(entry)\n    DATA.write_text(json.dumps(history, indent=2))\n    return {\"status\": \"sent\", \"to\": req.number, \"msg\": req.message}",
  "ocr_text": "ChatGPT File Edit View Window Help 6 \u20acOBD S xem F Q S CO WedJul2 12:00PM\n\nMaccy\n\n/Users/bhuvanarora/excuse-generator/\nv @ excuse_api.py:73:\nLangChainDeprecationWarning: The method\n\neee M7 GG Intelligent Excuse Generator Plan > *BaseChatModel.__call__* was deprecated...\nBhuvan\nve PLUIES5LUIIGt \u00a9 UdSe IULIIdL VUdLIIeS> Lalyuaye alu Keep Lt CUlILLse. |,\n\" salle Wt g G \" Review \u00a7@ Revert\ne GURUSE-C ENTER 61 sarcastic Answer with brief, dry sarcasm.\",\na 62 \"emergency\": \"Sound panicked and extremely urgent; maximum 20 words.\"\noO EXPLORER 990 @ excuse_api.py5 X  {} history.json @ README.md env U 63 }\n\\ EXCUSE-GENERATOR \u00ae excuse_api.py > @ emergency\n5 . 64 style_clause = tone_map.get(r.mode.lower(), tone_map[\"normal\"])\n\u2014Pycache_ def generate(r: Req):\n\\ venv 65 full_prompt = (\n, PROBLEMS OUTPUT DEBUGCONSOLE TERMINAL PORTS\n> [ele e \u2014 66 f\"{SYSTEM_PROMPT}\\nTone: {style_clause}\\n\"\n(10K) > include Pp .\n. raise exc . . .\n> lib File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/_exception Added six predefined tones:\npyvenv.cfg p\nawait app(scope, receive, sender)\nenv U File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing.py + normal (default)\n\u00ae excuse_api.py 5 await self.middleware_stack(scope, receive, send)\n. 7 File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing. py\n{} history.json await route.handle(scope, receive, send) + apology\n@ README.md File \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/starlette/routing.py\n_ ; await self.app(scope, receive, send)\n= requirements.txt File \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/starlette/routing.py \u00ab humorous\nawait wrap_app_handling_exceptions(app, request)(scope, receive, send)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/_exception\nP ; * professional\nraise exc\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/_exception\np Pa i\nawait app(scope, receive, sender) sarcastic\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/routing. py\nresponse = await f(request) emergency\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/fastapi/routing.py\",\nraw_response = await run_endpoint_function(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/fastapi/routing.py\", Now callers can do:\nreturn await run_in_threadpool(dependant.call, *values)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/concurrenc\nreturn await anyio.to_thread. run_sync(func) bash oO Copy\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/to_thread.py\",\nreturn await get_async_backend().run_sync_in_worker_thread( curl -X POST http://127.0.@.1:8000/generate \\\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/_backends/_asy -H \"Content-Type: application/json\" \\\nworker_thread _ -d '{\"scenario\": \"deadline\", \"urgency\": \"medium\", \"mode\": \"humorous\"}'!\nreturn await future\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/_backends/_asy\nresult = context.run(func, xargs) and get a witty excuse.\nFile \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 77, in generate H \u2014 4 \u2019\nout = json.loads( response text) Save is done\u2014restart Uvicorn and you're ready.\nFile \"/Users/bhuvanarora/.pyenv/versions/3.11.13/1lib/python3.11/json/__init__.py\", line 346, in 1 oO q ra) (9)\nreturn _default_decoder.decode(s)\nFile \"/Users/bhuvanarora/.pyenv/versions/3.11.13/1lib/python3.11/json/decoder.py\", line 337, in de\nobj, end = self.raw_decode(s, idx=_w(s, @).end())\nFile \"/Users/bhuvanarora/.pyenv/versions/3.11.13/1lib/python3.11/json/decoder.py\", line 355, in ra \u00a9 excuse_apipy x +\n> OUTLINE raise JSONDecodeError(\"Expecting value\", s, err.value) from None -_\nx json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char @)\nTIMELINE U internal server err\nmaint O @0A5  Bhuvan Arora (29 minutes ago) QQ Ln 101, Col 8\n\n\u2014 234.3 MB mR\nRag ee LCP UOCUTICIITS \u00abpul Tee pet\n08:54 SP \u00ae wv Qg \u00b0\n\n\u2014 S@80O\u00b0aSSe\u00a9 \u00a98002 &*\n\n: :"
}