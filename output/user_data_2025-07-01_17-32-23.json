{
  "timestamp": "2025-07-01_17-32-23",
  "active_window": "pycharm",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "import datetime\nimport pytesseract\nfrom PIL import ImageGrab\nimport subprocess\nimport json\nimport time\nimport pyperclip\nimport platform\n\n# On Windows, import win32gui for window title\ntry:\n    import win32gui\n    import win32con\nexcept ImportError:\n    win32gui = None\n    win32con = None\n\ndef is_windows():\n    return platform.system() == \"Windows\"\n\n# Get active window title (cross-platform)\ndef get_active_window_title():\n    if is_windows():\n        try:\n            hwnd = win32gui.GetForegroundWindow()\n            return win32gui.GetWindowText(hwnd)\n        except Exception as e:\n            return f\"Error (Win): {e}\"\n    else:\n        try:\n            script = 'tell application \"System Events\" to get name of (processes where frontmost is true)'\n            output = subprocess.check_output(['osascript', '-e', script]).decode().strip()\n            return output\n        except Exception as e:\n            return f\"Error (Mac): {e}\"\n\n# Improved function: get_focused_text() returns the AXValue string or error message, not printing anything\ndef get_focused_text():\n    if is_windows():\n        # Just return clipboard text on Windows\n        try:\n            return pyperclip.paste()\n        except Exception as e:\n            return f\"Clipboard error (Win): {e}\"\n    else:\n        try:\n            script = '''\n            tell application \"System Events\"\n                set frontApp to name of first application process whose frontmost is true\n                if frontApp is \"Visual Studio Code\" then\n                    keystroke \"a\" using command down\n                    delay 0.2\n                    keystroke \"c\" using command down\n                    delay 0.2\n                    return \"CLIPBOARD\"\n                else\n                    tell application process frontApp\n                        try\n                            set focusedElement to value of attribute \"AXFocusedUIElement\"\n                            set focusedValue to value of attribute \"AXValue\" of focusedElement\n                            return focusedValue\n                        on error\n                            return \"Could not extract AXValue from focused element\"\n                        end try\n                    end tell\n                end if\n            end tell\n            '''\n            result = subprocess.run(['osascript', '-e', script], capture_output=True, text=True)\n            output = result.stdout.strip()\n            if output == \"CLIPBOARD\":\n                time.sleep(0.3)\n                clipboard_content = pyperclip.paste()\n                return clipboard_content\n            elif output == \"\":\n                return \"Could not extract AXValue from focused element\"\n            else:\n                return output\n        except Exception as e:\n            return f\"Error (Mac): {e}\"\n\n# Take screenshot\ndef capture_screenshot(filename):\n    img = ImageGrab.grab()\n    img.save(f\"output/{filename}\")\n    return img\n\n# Run OCR on image\ndef run_ocr(image):\n    text = pytesseract.image_to_string(image)\n    return text.strip()\n\n## Main capture logic (unchanged)\n\nif __name__ == \"__main__\":\n    import json\n    import time\n    import pyperclip\n    try:\n        while True:\n            timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n            screenshot_path = f\"screenshot_{timestamp}.png\"\n            active_window = get_active_window_title()\n            # Use get_focused_text() for textbox_text\n            textbox_text = get_focused_text()\n            # Clipboard logic: On Windows, clipboard and focused_text are the same; on Mac, they may differ\n            if is_windows():\n                clipboard_content = textbox_text\n            else:\n                clipboard_content = pyperclip.paste()\n            image = capture_screenshot(screenshot_path)\n            ocr_text = run_ocr(image)\n            import os\n            # Read the VS Code live text file (cross-platform)\n            vscode_text = \"\"\n            if platform.system() == \"Darwin\":\n                path = os.path.expanduser(\"~/Desktop/vscode_live_text.txt\")\n            elif platform.system() == \"Windows\":\n                path = os.path.expanduser(\"~/Desktop/vscode_live_text.txt\")\n            else:\n                path = \"/tmp/vscode_live_text.txt\"\n\n            try:\n                with open(path, \"r\", encoding=\"utf-8\") as f:\n                    vscode_text = f.read().strip()\n            except FileNotFoundError:\n                vscode_text = \"VS Code text not found.\"\n\n            data = {\n                \"timestamp\": timestamp,\n                \"active_window\": active_window,\n                \"focused_text\": textbox_text,\n                \"clipboard\": clipboard_content,\n                \"vscode_text\": vscode_text,\n                \"ocr_text\": ocr_text\n            }\n            with open(f\"output/user_data_{timestamp}.json\", \"w\") as f:\n                json.dump(data, f, indent=2)\n            with open(\"output/live_output.json\", \"w\") as f:\n                json.dump(data, f, indent=4)\n            time.sleep(20)\n    except KeyboardInterrupt:\n        print(\"Program interrupted by user.\")",
  "vscode_text": "<!DOCTYPE html>\n<html>\n  <body style=\"margin: 0; background: rgba(0,0,0,0.7); color: white; font-family: sans-serif;\">\n    <div style=\"-webkit-app-region: drag; padding: 10px; background: rgba(0,0,0,0.8);\">\n      <pre id=\"output\" style=\"white-space: pre-wrap; word-wrap: break-word;\">Waiting for data...</pre>\n    </div>\n    <script>\n      const { ipcRenderer } = require('electron');\n      ipcRenderer.on('update-prediction', (event, data) => {\n        document.getElementById('output').textContent = data;\n      });\n    </script>\n  </body>\n</html>",
  "ocr_text": "@ = PyCharm File Help 6\u00a9 \u20ac8 OGD O S 2%e& FF Q BS @ Tue Juli 5:32PM\n\n|) PO bm ~\n\nyvvlliny,\n\n\\* Y,\n2 1 iN Popup JSON Viewer >\n\n- 10 2- Bhuvan\n\n-9 3-\n\n= 4 = eee Welcome to PyCharm M\n\n7 S\n\u201cN, 6 . 5.\nus PyCharm Q | New Script New Project Open Clone Repository\n\nJULY\n\nMTWT FS S Projects (B) Buddy The warning you're seeing \u2014\n\n; 4 : o . . . Customize M [Warning] Failed to delete screenshot: name 'os' is\n\n14 15 16 17 18 19 20 Plugins SP SCE Rea not defined \u2014\n\n21 22 23 24 25 26 27 means the os module wasn't imported in the same file where you're\n\n28 29 30 31 earn (PG PyCharmMiscProject deleting the screenshot.\n\nPP PythonProject v Fix\nAdd this line at the top of your gatheruserdata.py file (or wherever\nyou're doing os. remove(...)):\npython \u00a9) Copy\n\\\nimport os\nEven though os is already imported in other places (like\nactivity_analyzer. py), each Python file (module) needs to\nimport what it uses directly.\nOnce you add that, the screenshot deletion will work correctly. Want\nme to auto-insert that now?\nTake a quick onboarding tour Amd \u00ae\ns\nStart Tour\nCc a]\nS\n\nMessage Bhuvan\n\neae $k OER 2 + \u00ae & g st)\n\nB=.\n\njj\n\n7. POW (= ru\n= 1 Ss) =f /]"
}