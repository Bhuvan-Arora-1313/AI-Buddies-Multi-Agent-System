{
  "timestamp": "2025-07-02_09-50-19",
  "active_window": "firefox",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()          # \u2190 NEW: pulls OPENAI_API_KEY from .env\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom openai import OpenAI\n\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n# ---------- OpenAI client ----------\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    res = client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": prompt},\n        ],\n        temperature=0.8,\n    )\n    out = json.loads(res.choices[0].message.content)\n\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "@ = Firefox File Edit View History Bookmarks Tools Window Help G@ FB OCOOS8S\n\n34%8) F Q QS SO Wed Jul 2 9:50AM\n\nee@ (ica) =} List of research pape X & Artificial Intelligence X CO NLP_1.ipynb - Colab X CO NLP_1.ipynb - Colab X a LAUNCHED Global X \u2122M Launched - Artificial X Artificial_Intelligence_Ce X | Al-05-BBLEN4 x \u00a9 Opendl x \u00a9 Sign in - Google acc X + Vv\noo < > X O O @& = accounts.google.com/o/oauth2/v2/auth/oauthchooseaccount?response_type=code&client_id=799222349882-ne3i0s9jdm5s0p7II2d7tlsi1vcthalt.apps.googleusercontent.com&redir Vv 4 \u00a9 ve \u2014\n2\n\u00a9\n\nG Sign in with Google\n\nChoose an account\n\nto continue to OpenAl\n\nBhuvan Arora\nbhuvanaro123@gmail.com\n\n@\u00bb BHUVAN ARORA\n~~ f20230246@pilani.bits-pilani.ac.in\n\ne. Bhuvan Arora\nem arorabhuvan1755@gmail.com\n\n@ Use another account\n\nBefore using this app, you can review OpenAl\u2019s privacy policy and\nTerms of Service.\n\nEnglish (United Kingdom) Help Privacy Terms\n\nauth.openai.com\n\n9820068620 \u00a982\u00b00 ~At"
}