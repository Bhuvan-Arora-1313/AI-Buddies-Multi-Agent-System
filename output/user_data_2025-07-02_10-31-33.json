{
  "timestamp": "2025-07-02_10-31-33",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"gemini-pro\")\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\n{prompt}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "\u00e9\n\nCode File Edit Selection\n\nGo Run Terminal Window\u2019 Help\n\nG@ROTO8\n\n22%0) >\n\nQ Se S@ Wed Jul 2 10:31AM\n\no\nS\n\n\u00a9\n\n= List of research 5\n\n\u20ac > CG @\nee0@\n\n2\n\nEXPLORER\n\n\\Y EXCUSE-GENERATOR\n\nP > __pycache__\nv .venv\n> bin\noe > include\n> lib\n\n2\nFR\nA\n\n\u00a9 pyvenv.cfg\n .env\n\nU\nU\n@ excuse_api.py 4,U\n{} history.json U\n\nU\n\n= requirements.txt\n\n@\n> OUTLINE\naD > TIMELINE\n\nGE & maine @0A4\n\n@ Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Co ca LAUNCHED Glob M Launched - Artif Artificial_Intelligence\n\nO 8 =\n\naistudio.google.com/apikey\n\n(B al-05-BBLena \u00a9 Openal @ api keys - Open: \u00a9 Gemini APirefere\u2019 9% Get API key | G X\n\n\u20ac\u00e9 5 \u00a3 excuse-generator By Cob WwW\nPROBLEMS @ OUTPUT DEBUGCONSOLE TERMINAL PORTS tye vy x\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/fastapi/routing.py\", line 214, in run LJ pyth... ti\n\n_endpoint_function\nreturn await run_in_threadpool(dependant.call, **values) :\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/starlette/concurrency.py\", line 37, i\nn run_in_threadpool\nreturn await anyio.to_thread. run_sync( func)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/to_thread.py\", line 56, in run_\nsync\nreturn await get_async_backend().run_sync_in_worker_thread(\n\n>-| zsh\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 24\n70, in run_sync_in_worker_thread\nreturn await future\nAAAAAAAAAAAAR on\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 96]\n7, in run\nresult = context.run(func, xargs)\nFile \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 42, in generate\nout = json. loads (model. generate_content(full_prompt) .text)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/google/generativeai/generative_models\"\n-py\", line 331, in generate_content\nresponse = self._client.generate_content(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/ai/generat ive language_vibeta/s\nervices/generative_service/client.py\", line 835, in generate_content\nresponse = rpc(\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/gapic_v1/method. py\",\nline 131, in __call__\nreturn wrapped_func(xargs, **kwargs)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 294, in retry_wrapped_func |\nreturn retry_target(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3\n, line 156, in retry_target\nnext_sleep = _retry_error_helper(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3\nline 214, in _retry_error_helper\nraise final_exc from source_exc\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3\n, line 147, in retry_target\nresult = target() -\n\n-11/site-packages/google/api_core/retry/retry_unary.py\" |\nt\n\n.11/site-packages/google/api_core/retry/retry_base.py\",\n\n.11/site-packages/google/api_core/retry/retry_unary.py\"\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3\n, in func_with_timeout\nreturn func(*args, *xkwargs) '\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3\ne 78, in error_remapped_callable\nraise exceptions. from_grpc_error(exc) from exc\ngoogle.api_core.exceptions.NotFound: 404 models/gemini-pro is not found for API version vibeta, or is not supported\nfor generateContent. Call ListModels to see the list of available models and their supported methods.\n\n.11/site-packages/google/api_core/timeout.py\", line 130\n\n.11/site-packages/google/api_core/grpc_helpers.py\", lin\n\nQ Ln7,Col1 Spaces:4 UTF-8 LF {} Python & 3.13.264-bit\n= = =a\nIko to mtj Iko to MTJ (1).pdf\n\nse20\n\nfile.pdf\n\nITRV (1).pdf ITRV.pdf JETIR2101184 Iko to MTJ-\n\n\u2014\n\n. .\n\nIntelligent Excuse Generator Plan >\nBhuvan\n\nbash O) Copy\nCtr1-C\nuvicorn excuse_api:app -\u2014-reload\n4 Test\nbash O) Copy\n\ncurl -X POST http://127.0.0.1:8000/generate \\\n-H \"Content-Type: application/json\" \\\n-d '{\"scenario\":\"missed class\", \"urgency\":\"panic\"}'\n\nYou should now get a JSON excuse.\nIf you instead see 429: quota exceeded you've hit the free-tier limit\u2014wait a minute or create a\nsecond API key under a new Google Al Studio project.\n\nOnce the request succeeds:\n\nbash O) Copy |\nVv\npio freeze > requirements.txt\nMessage Bhuvan\n(ma) ~\n\n2) a = = =\n:\n\n."
}