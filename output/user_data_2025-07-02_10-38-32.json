{
  "timestamp": "2025-07-02_10-38-32",
  "active_window": "ChatGPT",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "curl -X POST http://127.0.0.1:8000/generate \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"scenario\":\"missed class\",\"urgency\":\"panic\"}'",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"models/gemini-pro\")\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "ChatGPT File Edit View Window\u2019 Help - 2%8) Ff Q Bg Wed Jul 2 10:38AM\n+\n\n\u00a9 List of research =) Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Cc BB Launcue Glot \u2122 Launched - Artif Artificial_Intelligence. {J Al-05-BBLEN4 \u00ae Openal @ api keys - Open \u00a9 Gemini API refer 96 Get API key | GX\n\nC\u20ac > G @\u00e9 O 8 \u00ae aistudio.google.com/apikey eee OG Intelligent Excuse Generator Plan > Gl =\n\nBhuvan\n\noO\n6 <> P excuse-generator By ob Ow a\n\n| o EXPLORER + J Welcome \u00ae excuse_api.py 4,U X %.env U Dy\n\n\\ EXCUSE-GENERATOR \u00ae excuse_api.py > \u00a9 generate\n\n\u00a9\n\nP| > \u2014pyeache_ 37. # ---------- /generate ----------\n\nVV venv\n\n\u00bb _ 38 @app.post(\"/generate\") bs\n> include PROBLEMS @ OUTPUT DEBUGCONSOLE TERMINAL PORTS. tyes A x\n\n> lib\n& 3! |\n\n\u00a9 pyvenv.cfg sync\n\n-) python3.11\nreturn await get_async_backend().run_sync_in_worker_thread( 2Jzsh\n\n\u00a9 .env AAAAAA AAA AAA AAARAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAAAAA, be\n\nU\nU\n=5 \u00ae excuse_api.py 4,U File \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 245\nU\nU\n\n70, in run_sync_in_worker_thread . .\nreturn await future version conflict\n\n{} history.json\nA = requirements.txt . . . . . .\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 96\n7, in run\nresult = context.run(func, xargs) '\n\nIt seems the user is encountering a 404 error for vibeta even\n\nFile \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 42, in generate\nout = json. loads (model. generate_content(full_prompt) .text)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/generativeai/generative_models \u00ae\n-py\", line 331, in generate_content\nresponse = self._client.generate_content( Looked at Code\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/ai/generativelanguage_vibeta/s\nervices/generative_service/client.py\", line 835, in generate_content\nresponse = rpc( 1\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/gapic_v1/method. py\",\nline 131, in __call__\nreturn wrapped_func(xargs, **kwargs)\n\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 294, in retry_wrapped_func\nreturn retry_target(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\",\n, line 156, in retry_target\nnext_sleep = _retry_error_helper(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_base.py\", \u00bb\"\nline 214, in _retry_error_helper\nraise final_exc from source_exc\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/retry/retry_unary.py\"\n, line 147, in retry_target\nresult = target()\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/timeout.py\", line 130,50\n, in func_with_timeout\nreturn func(*args, +kkwargs) |\n@ File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/google/api_core/grpc_helpers.py\", lin Vv\ne 78, in error_remapped_callable\nraise exceptions. from_grpc_error(exc) from exc\nsb > OUTLINE google.api_core.exceptions.NotFound: 404 models/gemini-pro is not found for API version vibeta, or is not supported\n\nfor generateContent. Call ListModels to see the list of available models and their supported methods. A\n> TIMELINE 0 \u00a9 excuse_api.py x\n\nUE & maine @ @o0A4 Ln 42, Col 63 Spaces: 4 UTF-8 LF {} Python & 3.13.264-bit\n\nMessage Bhuvan\n+O 0\n\nB file.pdf ITRV (1).pdf ITRV.pdf AIEUTIR EAI EY Iko to mtj Iko to MTJ (1).pdf = Iko to MTJ-s..-\n\nS@80O\u00bb\u00b0aSG2o O92\n\n. .\n\n|\n2) a =\n:"
}