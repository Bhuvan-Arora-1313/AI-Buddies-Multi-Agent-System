{
  "timestamp": "2025-07-01_17-35-56",
  "active_window": "firefox",
  "focused_text": "with open(f\"output/{filename}\", \"r\", encoding=\"utf-8\") as f:            return json.load(f)    except FileNotFoundError:        return {}    except json.JSONDecodeError:        return {}\ndef get_all_user_data_files() -> List[str]:    \"\"\"Get list of all user data files in output directory\"\"\"    try:        files = [f for f in os.listdir(\"output\") if f.startswith(\"user_data_\") and f.endswith(\".json\")]        return sorted(files)    except FileNotFoundError:        return []\ndef analyze_user_activity_from_json(user_data: Dict[str, Any]) -> Dict[str, Any]:    \"\"\"    Analyze user data from JSON to determine what the user is doing    Returns JSON format with activity classification    \"\"\"    if not user_data:        return {            \"activity\": \"unknown\",            \"confidence\": 0.0,            \"description\": \"No user data available\",            \"timestamp\": time.time()        }\n    # Extract relevant information from user data    active_window = user_data.get(\"active_window\", \"\")    focused_text = user_data.get(\"focused_text\", \"\")    clipboard_content = user_data.get(\"clipboard\", \"\")    # vscode_text = user_data.get(\"vscode_text\", \"\")    ocr_text = user_data.get(\"ocr_text\", \"\")    timestamp = user_data.get(\"timestamp\", \"\")\n    # Combine all text sources for analysis#     combined_text = f\"\"\"# Active Window: {active_window}# Focused Text: {focused_text}# Clipboard: {clipboard_content}# VS Code Text: {vscode_text}# Screen OCR: {ocr_text}#     \"\"\".strip()    combined_text = f\"\"\"Active Window: {active_window}Focused Text: {focused_text}Clipboard: {clipboard_content}Screen OCR: {ocr_text}    \"\"\".strip()\n    if not combined_text or combined_text.strip() == \"\":        return {            \"activity\": \"unknown\",            \"confidence\": 0.0,            \"description\": \"No meaningful text data available\",            \"timestamp\": time.time()        }\n    system_prompt = \"\"\"You are an AI assistant that analyzes user activity data to determine what the user is currently doing.         You have access to multiple data sources:    - Active Window: The currently active application    - Focused Text: Text from the focused element    - Clipboard: Content in the clipboard    - VS Code Text: Text from VS Code editor (if available)    - Screen OCR: Text extracted from screen capture        Analyze this data and classify the user's activity into one of these categories:    - coding: Writing, editing, or reviewing code (Python, JavaScript, etc.)    - researching: Reading articles, papers, documentation, or searching for information    - browsing: General web browsing, social media, or casual internet use    - emailing: Composing, reading, or managing emails    - messaging: Using chat applications, messaging apps, or communication tools    - gaming: Playing video games or game-related activities    - watching: Watching videos, streams, or multimedia content    - writing: Writing documents, notes, or creative content    - designing: Working on design, graphics, or creative projects    - working: General work activities not covered by other categories    - unknown: Unable to determine the activity        Consider the following patterns:    - Coding: Look for code syntax, function definitions, imports, IDE elements    - Messaging: Look for chat interfaces, message bubbles, contact names    - Researching: Look for articles, documentation, search results    - Browsing: Look for web browser elements, URLs, navigation        Return your response in valid JSON format with these fields:    - activity: The classified activity (string)    - confidence: Confidence level 0.0-1.0 (float)    - description: Brief description of what you observed (string)",
  "clipboard": "git push",
  "vscode_text": "<!DOCTYPE html>\n<html>\n  <body style=\"margin: 0; background: rgba(0,0,0,0.7); color: white; font-family: sans-serif;\">\n    <div style=\"-webkit-app-region: drag; padding: 10px; background: rgba(0,0,0,0.8);\">\n      <pre id=\"output\" style=\"white-space: pre-wrap; word-wrap: break-word;\">Waiting for data...</pre>\n    </div>\n    <script>\n      const { ipcRenderer } = require('electron');\n      ipcRenderer.on('update-prediction', (event, data) => {\n        document.getElementById('output').textContent = data;\n      });\n    </script>\n  </body>\n</html>",
  "ocr_text": "on @ Oo D\n\n=} List of research papers - Google X N Enhanced multi agent coordinat X * s41598-025-88145-7-2.pdf x () Editing Buddy/activity_analyzer. X +\n\n\u20ac<\u20ac ~ CQ O @G = github.com/JayKap-Git/Buddy/edit/main/activity_analyzer.py#L6C13 w 4 \u00a9 oa\nVv ws &X\nChatGPT = es) JayKap-Git / Buddy & Q Type (7) to search 8\\~ + + |/O}[ NA mT)\n=e ChatGPT v G\n\n<> Code \u00a9) Issues {1 Pullrequests \u00a9) Actions [F Projects \u00a9 Security l[~ Insights\nSaved memory full \u00a9\n\n{{) Files Buddy/ activity_analyzer.py in main Cancel changes Commit changes...\n@ When Drones Stay Closer\n(Like a Flock): P main ~ +|Q Edit Preview Spaces + 4\u00a2 Nowrap \u00a2\ne Purpose: Cooperate tightly for a goal. Q Go to file 8 80\n81\ne Examples: > BB __pycache_ 82\n. Light ehowe ] output 83 combined_text o_v\n84 Active Window: {active_window}\n* Cargo transport in groups > BB text 85 Focused Text: {focused_text}\n86 Clipboard: {clipboard_content}\n. (}) .DS_Store .\ne Defense swarms attacking together 87 Screen OCR: {ocr_text}\nIn these cases, moving together like [ -env o \u201cstrip()\nbirds is useful. | (5) activity_analyzer.py 90 if not combined_text or combined_text.strip() == \"\":\n{5 gatheruserdata.py ee FSA 4\n92 \"activity\": \"unknown\",\n{5 requirements.txt 93 \"confidence\": 0.0,\nhy user_text_extracter.py 94 \"description\": \"No meaningful text data available\",\nae _\u2014 . 95 \"timestamp\": time.time()\n\u00bb Key Point: 86 ;\n\u00ab Swarm behavior + Always flying close. ee\n98 system_prompt = \"\"\"You are an AI assistant that analyzes user activity data to determine what the user is currently doing.\nIt means they coordinate and cooperate. 99 I\nSometimes they spread out, sometimes they 100 You have access to multiple data sources:\n. . 101 \u2014 Active Window: The currently active application\nfly together\u2014it depends on the mission. 102 \u2014 Focused Text: Text from the focused element\n103 - Clipboard: Content in the clipboard\n104 - VS Code Text: Text from VS Code editor (if available)\n105 - Screen OCR: Text extracted from screen capture\n106\nDo you want me to explain how drones stay 107 Analyze this data and classify the user's activity into one of these categories:\nconnected when the Nae dispersed? 108 - coding: Writing, editing, or reviewing code (Python, JavaScript, etc.)\n109 - researching: Reading articles, papers, documentation, or searching for information\nIn om aA ~ A 110 - browsing: General web browsing, social media, or casual internet use\n111 \u2014 emailing: Composing, reading, or managing emails\nAsk anything 112 - messaging: Using chat applications, messaging apps, or communication tools\n113 \u2014 gaming: Playing video games or game-related activities\n+ 2 Tools a 114 - watching: Watching videos, streams, or multimedia content\n115 - writing: Writing documents, notes, or creative content\nChatGPT can make mistakes. Check important info. See Cookie 116 - designing: Working on design, graphics, or creative projects\n\nPreferences. Use Control + Shift + m|/to toggle the tab key moving focus. Alternatively, use esc then tab/| to move to the next interactive element on the page."
}