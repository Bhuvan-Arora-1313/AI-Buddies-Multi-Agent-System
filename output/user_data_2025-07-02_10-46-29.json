{
  "timestamp": "2025-07-02_10-46-29",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "# stop any uvicorn still running\nCtrl-C\npkill -f \"uvicorn.*excuse_api\" 2>/dev/null   # just in case\n\nsource .venv/bin/activate                    # activate venv\nuvicorn excuse_api:app --reload",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\nmodel = genai.GenerativeModel(\"gemini-pro\")\nprint(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\nScenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "Code File Edit Selection View Go  Run_ Terminal Window\u2019 Help 3 23%%4) FQ Bg Wed Jul 2 10:46AM\n+\n\n= List of research * Artificial Intellige CO NLP_1.ipynb - Cc CO NLP_1.ipynb - Cc ca LAUNCHED Glok M@ Launched - Artif Artificial_Intelligence (8) al-05-BBLEN4 \u00a9 OpendAl coy API keys - Open (G)\nMaccy\n. # stop any uvicorn still runninge@Ctri-C @pkill\nO<\u00abvr Cao O 86 & aistudio.google.com/apikey Intelligent Excuse Generator Plan > @ -f \"uvicorn*excuse_api\" 2>/dev/null # just\nBhuvan in case@ source .venv/bin/activate\n6 fi # activate venv@uvicorn excuse_api:app --...\nH or\nGoogle Al Studio a ; ; BO\na} models/gemini-pro, which that old endpoint can\u2019t serve.\nio) ee ith the new SDK (0.8.5) you should pass the plain model ID (\"gemini-\u2014pro\") when you build\nx e model object \u2014not the full \u201cmodels/...\u201d path.\nC= AP\ni Us\nLo ick 2-line fix\na\n\u00a9 Ch |\npython \u00a9 Copy\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\") )\nmodel = genai.GenerativeModel(\"gemini-pro\")\nfake sure there\u2019s only one import / configure / model block in the file.)\nAre you sure you want to paste 6\nlines of text into the terminal?\nPreview:\n# stop any uvicorn still runni... .\nCtrl-c hen restart everything cleanly\npkill -f \"uvicorn.*excuse_api\"...\nbash O) Copy\nPaste as one line Ctrl-C\npkill -f \"uvicorn.*excuse_api\" 2>/dev/null\nCancel\nsource .venv/bin/activate\n4 Do not ask me again uvicorn excuse_api:app -\u2014-reload\n\u00bbu should now see the temporary line we added: A\nv \u00a9 Copy\nexcuse_api.py X\nssage Bhuvan\n\u00ae & \u00a2 @\nView stat leu \u2014\nidee ll \u2018iad =a amcnanened pEses F\n\nS80\u00b0eESE820 O80 \u00a3*"
}