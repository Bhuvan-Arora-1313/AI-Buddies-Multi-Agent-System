{
  "timestamp": "2025-07-15_11-29-40",
  "active_window": "ChatGPT",
  "focused_text": ".env",
  "clipboard": "git add .",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n# --- Gemini via LangChain (REST v1) ---\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.schema import SystemMessage, HumanMessage\n\n# expose key for LangChain wrapper\nos.environ[\"GOOGLE_API_KEY\"] = os.getenv(\"GOOGLE_API_KEY\")  # must be in .env\n\nllm = ChatGoogleGenerativeAI(\n    model=\"gemini-2.5-flash\",          # free\u2011tier model\n    temperature=0.8,\n    convert_system_message_to_human=True\n)\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n    mode: str = \"normal\"   # \"normal\" | \"apology\"\n    language: str = \"en\"   # ISO code, e.g. \"en\", \"es\", \"fr\"\n    voice: bool = False   # If true, return an MP3 of the excuse\n\nclass EmergencyRequest(BaseModel):\n    number: str\n    message: str\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    style_clause = (\n        \"Respond in a guilt\u2011tripping, heartfelt apology tone.\"\n        if r.mode.lower() == \"apology\"\n        else \"Respond in a neutral, believable tone.\"\n    )\n    # language directive\n    lang_clause = (\n        \"\" if r.language.lower() in [\"en\", \"english\"] else\n        f\"Respond in {r.language} language.\"\n    )\n    full_prompt = (\n        f\"{SYSTEM_PROMPT}\\n\"\n        f\"Tone: {style_clause}\\n\"\n        f\"{lang_clause}\\n\"\n        f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    )\n    messages = [\n        SystemMessage(content=SYSTEM_PROMPT),\n        HumanMessage(content=full_prompt)\n    ]\n    response_text = llm(messages).content.strip()\n    # LangChain may wrap JSON in ``` blocks \u2013 strip them\n    if response_text.startswith(\"```\"):\n        response_text = response_text.strip(\"`\").lstrip(\"json\").strip()\n    out = json.loads(response_text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n    # --- optional voice synthesis ---\n    if r.voice:\n        from gtts import gTTS\n        audio_dir = Path(\"audio\")\n        audio_dir.mkdir(exist_ok=True)\n        audio_file = audio_dir / f\"{entry['id']}.mp3\"\n        gTTS(out[\"excuse\"], lang=r.language[:2]).save(audio_file.as_posix())\n        entry[\"audio\"] = str(audio_file)\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]\n\n# ---------- /emergency ----------\n@app.post(\"/emergency\")\ndef emergency(req: EmergencyRequest):\n    \"\"\"\n    Simulate sending an emergency SMS/call.\n    For the demo we just log the request and append an entry to history.json.\n    \"\"\"\n    entry = {\n        \"id\": f\"emergency-{int(time.time())}\",\n        \"ts\": time.time(),\n        \"excuse\": \"EMERGENCY TRIGGER\",\n        \"believability_score\": 1.0,\n        \"chat_log\": f\"Sent '{req.message}' to {req.number}\"\n    }\n    history = json.loads(DATA.read_text())\n    history.append(entry)\n    DATA.write_text(json.dumps(history, indent=2))\n    return {\"status\": \"sent\", \"to\": req.number, \"msg\": req.message}",
  "ocr_text": "@ = PyCharm File Edit View Navigate Code Refactor Run Tools Git Window Help @ 6 ODO 8s \u00a9 sx.\u2014 F\n\nQs\n\n@ Tue Jul 15 11:29AM\n\nmain v Cy\n\nMaccy\nBuddy Bubble git add.\n\n@ activity_analyzer.py @ activity_analyzer_grog.py @ .gitignore @ floating_bubble_ui_grog.py @ shared_state.py @\u00ae floating_bubble_ui.py\n\n2025-07-15_11-26-35.json 1 -eny\n\u2014 ~2025-07-15_11-26-57.json\n8% {} user_data_2025-07-15_11-27-20.json\n{3 user_data_2025-07-15_11-27-44.json\noo {} user_data_2025-07-15_11-28-09.json\n{3 user_data_2025-07-15_11-28-32.json\n{3 user_data_2025-07-15_11-28-55.json\n{} user_data_2025-07-15_11-29-17.json\n> Otext\n= .env\n@ .gitignore\n@ activity_analyzer.py\n@ activity_analyzer_groq.py\n@ buddy_magic.py\n@\u00ae buddy_magic_groq.py\n@ floating_bubble_ui.py\n@ floating_bubble_ui_grog.py\n@ gatheruserdata.py\n\u00a9@ output_popup.py\n= pause.flag\nM\u2019 README.md\n= requirements.txt\n@ shared_queue.py\n@ shared_state.py\n@ tk_ui.py\n\nv4\n\nRun \u2014 floating_bubble_ui_grog e activity_analyzer_groq\n\n\"data_sources\": \"Active Window, Focused Text, Screen OCR\",\n\"timestamp\": 1752558689 .797154\n\nQO @\n\nDeleted: output/user_data_2025-07-15_11-21-26.json\nDeleted: output/user_data_2025-07-15_11-21-10.json\nDeleted: output/user_data_2025-07-15_10-20-03.json\nDeleted: output/user_data_2025-07-15_10-18-27.json\nDeleted: output/user_data_2025-07-15_10-19-16.json\n7\u2019 Deleted: outout/user data 2025-07-15 10-19-39.ison\nOBuddy > @gitignore 1:5 LF UTF-8\n\na\nb oh fe\n\nwc \u00a9\n\n4 spaces\n\nv\n\nPython 3.13 (Buddy)\n\nS80\u00b08GE20 GBG00800\u00b0\"3'' a8 .=..9\u2122\n\nar\n\n8\n\nN\n\n@\n\nia)"
}