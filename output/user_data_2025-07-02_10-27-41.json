{
  "timestamp": "2025-07-02_10-27-41",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "from dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\n",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\"))\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nmodel = genai.GenerativeModel(\"gemini-pro\")\n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    prompt = f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    full_prompt = f\"{SYSTEM_PROMPT}\\n{prompt}\"\n    out = json.loads(model.generate_content(full_prompt).text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]",
  "ocr_text": "\u00e9\n\no\nS\n\n\u00a9\n\nCode File Edit Selection\n= List of research\n\u20ac>C@\n0@e@\u00b0e8\n\n| EXPLORER\n\n\\Y EXCUSE-GENERATOR\n\nP > __pycache__\nv venv\n\n> bin\n\n> include\n\n> lib\n\n\u00a9 pyvenv.cfg\n\u00a9 .env\n\n@ excuse_api.py\n\n{} history.json\n\nr\n2\nFR\nA\n\n= requirements.txt\n\n@\n$03 > OUTLINE\n\n> TIMELINE\n\nGE & maine @0A4\n\n4\n\nU\nU\nU\nU\nU\n\nView\n\nGo Run Terminal Window\u2019 Help\n\n@ Artificial Intellige CO NLP_1.ipynb - Co CO NLP_1.ipynb - Co ca LAUNCHED Glob M Launched - Artif Artificial_Intelligence\n\nO @& = aistudio.google.com/apikey\n<> p excuse-generator By 08 Oo la\nx Welcome @ excuse_api.py 4,U @\u00ae % .env U Dy %\n\n@ excuse_api.py > ...\n\n1 # excuse_api.py\n\n2 import os, json, time, hashlib\n\n3 from pathlib import Path\n\n4 from dotenv import load_dotenv, find_dotenv\n\n5 load_dotenv(find_dotenv(), override=True)\n\n6\n\n7 import google.generativeai as genai\n\n8 genai.configure(api_key=os.getenv(\"GEMINI_KEY\") )\n\n9\n\n10 from fastapi import FastAPI\n\n11 from pydantic import BaseModel\n\n12\n\n13\n\n14 model = genai.GenerativeModel(\"gemini-pro\")\n\n15 # ---------- simple \u201cDB\u201d -\u2014---------\n\n16 DATA = Path(\"history. json\")\n\n17 if not DATA.exists():\n\n18 DATA.write_text(\"[]\") # seed empty list\nPROBLEMS @ OUTPUT DEBUGCONSOLE TERMINAL PORTS. +yv A x\ngenerativeai) (2.33.2) na} GJ zsh\nRequirement already satisfied: typing-inspection>=0.4.@ in ./.venv/lib/python3.11/site-packages (from pydantic->goog >] zsh\nle-generativeai) (@.4.1) ~\nDownloading google_generativeai-@.8.5-py3-none-any.whl (155 kB) 7\nInstalling collected packages: google-generativeai\nSuccessfully installed google-generativeai-0.8.5 if\n\n@ (.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % pip show google-generativeai\n\nName: google-generativeai\nVersion: 0.8.5 i\"\n\nSummary: Google Generative AI High level API client library and tools.\nHome-page: https://github.com/google/generative-ai-python\n\nAuthor: Google LLC 1\nAuthor-email: googleapis\u2014packages@google. com\n\nLicense: Apache 2.0\n\nLocation: /Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages\n\nRequires: google-ai-generativelanguage, google-api-core, google-api-python-client, google-auth, protobuf, pydantic,\ntqdm, typing-extensions\n\nRequired-by:\n\n(.venv) bhuvanarora@Bhuvans\u2014-MacBook-Pro excuse-generator % o\n\n'\nQ 1n13,Col1 Spaces:4 UTF-8 LF {} Python & 3.13.264-bit (@&\n\nr a = \u2014,\n\nIko to MTJ (1).pdf\n\nIko to MTJ-\n\nfile.pdf\n\nITRV (1).pdf\n\nITRV.pdf Iko to mtj\n\nJETIR2101184\n\n880068820 OD\n\na\n\n=>\n\n23%0) F\n\nOo\nLe}\n\nS Q @ Wed Jul 2 10:27AM\n\n&\u00a9oO0O8\n\n(B al-05-BBLena \u00a9 Openal @ api keys - Open: \u00a9 Gemini API refer 96 Get API key | G X\n\nIntelligent Excuse Generator Plan >\nBhuvan\n\nsi this ok should i proceed with tersting\n\nThought for a couple of seconds\nAlmost there \u2014 you only need one Gemini import/config block.\n\nClean-up (2 quick edits)\n1. Delete the duplicate lines at the top:\n\npython \u00a9) Copy\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\") )\n\n(You already repeat them again at lines 13-14, so keep just one pair.)\n\n2. Your remaining block should look like:\n\npython \u00a9) Copy\n\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\nimport google.generativeai as genai\ngenai.configure(api_key=os.getenv(\"GEMINI_KEY\") )\nmodel = genai.GenerativeModel(\"gemini-pro\" )\n\n(Make sure you import only once and configure only once.)\n\nNow test\n\nMessage Bhuvan\n\n+ \u00ae\n\nen\n\nWw\n\n\u2014 versa aS SE\n\nfi \u00a2\nPo\n\u2014 =\n\u00b0 \u00b0 \u00b0"
}