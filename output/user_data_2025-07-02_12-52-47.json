{
  "timestamp": "2025-07-02_12-52-47",
  "active_window": "Electron",
  "focused_text": "Could not extract AXValue from focused element",
  "clipboard": "pip install gTTS",
  "vscode_text": "# excuse_api.py\nimport os, json, time, hashlib\nfrom pathlib import Path\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n\n\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n# --- Gemini via LangChain (REST v1) ---\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.schema import SystemMessage, HumanMessage\n\n# expose key for LangChain wrapper\nos.environ[\"GOOGLE_API_KEY\"] = os.getenv(\"GOOGLE_API_KEY\")  # must be in .env\n\nllm = ChatGoogleGenerativeAI(\n    model=\"gemini-2.5-flash\",          # free\u2011tier model\n    temperature=0.8,\n    convert_system_message_to_human=True\n)\n#print(\">>> model being used:\", model._name) \n# ---------- simple \u201cDB\u201d ----------\nDATA = Path(\"history.json\")\nif not DATA.exists():\n    DATA.write_text(\"[]\")          # seed empty list\n\n\n\n# ---------- FastAPI app ----------\napp = FastAPI()\n\nclass Req(BaseModel):\n    scenario: str  # e.g. \"missed class\"\n    urgency: str   # \"low\" | \"medium\" | \"panic\"\n    mode: str = \"normal\"   # \"normal\" | \"apology\"\n    language: str = \"en\"   # ISO code, e.g. \"en\", \"es\", \"fr\"\n    voice: bool = False   # If true, return an MP3 of the excuse\n\nclass EmergencyRequest(BaseModel):\n    number: str\n    message: str\n\nSYSTEM_PROMPT = \"\"\"\nYou are an elite alibi-creator.\nReturn a JSON with:\n  excuse               (\u2264 50 words),\n  believability_score  (0-1),\n  chat_log             (short WhatsApp-style proof)\n\"\"\"\n\n# ---------- /generate ----------\n@app.post(\"/generate\")\ndef generate(r: Req):\n    style_clause = (\n        \"Respond in a guilt\u2011tripping, heartfelt apology tone.\"\n        if r.mode.lower() == \"apology\"\n        else \"Respond in a neutral, believable tone.\"\n    )\n    # language directive\n    lang_clause = (\n        \"\" if r.language.lower() in [\"en\", \"english\"] else\n        f\"Respond in {r.language} language.\"\n    )\n    full_prompt = (\n        f\"{SYSTEM_PROMPT}\\n\"\n        f\"Tone: {style_clause}\\n\"\n        f\"{lang_clause}\\n\"\n        f\"Scenario: {r.scenario}\\nUrgency: {r.urgency}\"\n    )\n    messages = [\n        SystemMessage(content=SYSTEM_PROMPT),\n        HumanMessage(content=full_prompt)\n    ]\n    response_text = llm(messages).content.strip()\n    # LangChain may wrap JSON in ``` blocks \u2013 strip them\n    if response_text.startswith(\"```\"):\n        response_text = response_text.strip(\"`\").lstrip(\"json\").strip()\n    out = json.loads(response_text)\n    entry = {\n        \"id\": hashlib.md5(out[\"excuse\"].encode()).hexdigest(),\n        \"ts\": time.time(),\n        **out,\n    }\n    # --- optional voice synthesis ---\n    if r.voice:\n        from gtts import gTTS\n        audio_dir = Path(\"audio\")\n        audio_dir.mkdir(exist_ok=True)\n        audio_file = audio_dir / f\"{entry['id']}.mp3\"\n        gTTS(out[\"excuse\"], lang=r.language[:2]).save(audio_file.as_posix())\n        entry[\"audio\"] = str(audio_file)\n\n    history = json.loads(DATA.read_text())\n    if entry[\"id\"] not in {h[\"id\"] for h in history}:   # de-dupe\n        history.append(entry)\n        DATA.write_text(json.dumps(history, indent=2))\n\n    return entry\n\n# ---------- /top?n=5 ----------\n@app.get(\"/top\")\ndef top(n: int = 5):\n    history = json.loads(DATA.read_text())\n    history.sort(key=lambda x: x[\"believability_score\"], reverse=True)\n    return history[:n]\n\n# ---------- /emergency ----------\n@app.post(\"/emergency\")\ndef emergency(req: EmergencyRequest):\n    \"\"\"\n    Simulate sending an emergency SMS/call.\n    For the demo we just log the request and append an entry to history.json.\n    \"\"\"\n    entry = {\n        \"id\": f\"emergency-{int(time.time())}\",\n        \"ts\": time.time(),\n        \"excuse\": \"EMERGENCY TRIGGER\",\n        \"believability_score\": 1.0,\n        \"chat_log\": f\"Sent '{req.message}' to {req.number}\"\n    }\n    history = json.loads(DATA.read_text())\n    history.append(entry)\n    DATA.write_text(json.dumps(history, indent=2))\n    return {\"status\": \"sent\", \"to\": req.number, \"msg\": req.message}",
  "ocr_text": "@ Code File Edit Selection View Go Run Terminal Window\u2019 Help 6 \u00a38 \u00a9D S nxt F Q BS \u00a9 Wed Jul2 12:52PM\n\n[|\nx\n6\n\n\u00a9 9\u20ac Get API key |G X\n\nw usr os\n\nCore Features Designed:\n\nIntelligent Excuse Generator Plan >\n1. Al-Generated Excuses \u2014 Context-based excuse suggestions (work, school, social, family). Bhuvan\n\n2. Scenario-Based Customization \u2014 Allows users to refine excuses based on urgency and\n\nstarlette/_exception_handler.py\", line 42, in wrapped_app\n\nney\n\neee \u00a9  excuse-generator 8\u00bb iO await app(scope, receive, sender)\na EXPLORER \u00ae excuse_apipy 6 X  {} history.json M @\u00ae README.md ay wo [bw File \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-packages/\n\\ EXCUSE-GENERATOR \u00ae excuse_api.py > \u00a9 generate starlette/routing.py\", line 73, in app\n> h nf mannanntal ns Nani. Ju\nees Show full message\nVv env PROBLEMS @ OUTPUT DEBUGCONSOLE TERMINAL PORTS tyes A xX\n> bin s/starlette/routing.py\", line 734, in app 77 >.) python3.11\n10K) > include await route.handle(scope, receive, send) >] zsh\n> lib File \"/Users/bhuvanarora/excuse-generator/.venv/1ib/python3.11/site-package i. Thought for a second\ns/starlette/routing.py\", line 288, in handle\npyvenv.cfg await self.app(scope, receive, send)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-package Looked at Code\nLY U s/starlette/routing.py\", line 76, in app Looked at Code\n\u00ae excuse_api.py 6 await wrap_app_handling_exceptions(app, request)(scope, receive, send)\n. 7 File \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-package\n{} history.json M s/starlette/_exception_handler.py\", line 53, in wrapped_app\n\n@ README.md\n= requirements.txt\n\nraise exc\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-package\ns/starlette/_exception_handler.py\", line 42, in wrapped_app\nawait app(scope, receive, sender)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-package\ns/starlette/routing.py\", line 73, in app\nresponse = await f(request)\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-package\ns/fastapi/routing.py\", line 301, in app\nraw_response = await run_endpoint_function(\nFile \"/Users/bhuvanarora/excuse-generator/.venv/1lib/python3.11/site-package\ns/fastapi/routing.py\", line 214, in run_endpoint_function\nreturn await run_in_threadpool(dependant.call, **values)\nAAA AAA AAA AAA AAA AAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 1\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-package 1\ns/starlette/concurrency.py\", line 37, in run_in_threadpool c\nreturn await anyio.to_thread. run_sync( func) I\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-package \u00a9\ns/anyio/to_thread.py\", line 56, in run_sync\nreturn await get_async_backend().run_sync_in_worker_thread(\nAAA AAA AAA AAA AAA AAA AAA AAA AAAAAAAAAARAARAAAAAAAAAAAAAA 1\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-package\ns/anyio/_backends/_asyncio.py\", line 2470, in run_sync_in_worker_thread\nreturn await future\nFile \"/Users/bhuvanarora/excuse-generator/.venv/lib/python3.11/site-package\ns/anyio/_backends/_asyncio.py\", line 967, in run\nresult = context.run(func, *args)\nFile \"/Users/bhuvanarora/excuse-generator/excuse_api.py\", line 89, in gener\nate\n\nThe server crashed because the gtts package isn\u2019t installed yet.\n\nQuick fix\n1. Install gTTS inside your virtual-env\nbash \u00a9 Copy\n\nsource .venv/bin/activate\npip install gTTS\n\n2. Freeze requirements again\nbash \u00a9 Copy\n\npip freeze > requirements.txt\n\n3. Restart Uvicorn\n\nfrom gtts import gTTS\nModuleNotFoundError: No module named \u2018gtts' bash a) Copy\nACINFO: Shutting down V\nINFO: Waiting for application shutdown. I\nINFO: Application shutdown complete.\nINFO: Finished server process [14279] |!\nINFO: Stopping reloader process [14277]\n@ (.venv) bhuvanarora@Bhuvans-MacBook-Pro excuse-generator % source .venv/bin/a \u00a9 excuse_api.py x\n> OUTLINE ctivate\nSacine (.venv) bhuvanarora@Bhuvans-MacBook-Pro excuse-generator % pip install gITS\n\nLx \u00a5 maint &\n\n@o0A6\n\nt\nNot Committed Yet Qo Ln92,Col36 Spaces:4 UTF-8 LF {} Python @& 3.13.264-bit O\n\n08:54\n\nPrevious 30 Days\n\nB= \u2014 1 = | EB\n\n98O\u00b0SGEE20\n\nMessage Bhuvan\n\n+ @\u00ae ov\n\n=]"
}